{"version":3,"file":"unetjs.min.js","sources":["../node_modules/fjage/dist/esm/fjage.js","../src/unetutils.js","../src/unetsocket.js"],"sourcesContent":["/* fjage.js v1.9.1-rc6 */\n\n/* global window self */\n\nconst isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n\n/* eslint-disable no-restricted-globals */\nconst isWebWorker = typeof self === 'object'\n  && self.constructor\n  && self.constructor.name === 'DedicatedWorkerGlobalScope';\n/* eslint-enable no-restricted-globals */\n\nconst isNode = typeof process !== 'undefined'\n  && process.versions != null\n  && process.versions.node != null;\n\n/**\n * @see https://github.com/jsdom/jsdom/releases/tag/12.0.0\n * @see https://github.com/jsdom/jsdom/issues/1537\n */\n/* eslint-disable no-undef */\nconst isJsDom = () => (typeof window !== 'undefined' && window.name === 'nodejs')\n  || navigator.userAgent.includes('Node.js')\n  || navigator.userAgent.includes('jsdom');\n\nconst SOCKET_OPEN = 'open';\nconst SOCKET_OPENING = 'opening';\n\nvar createConnection;\n\n/**\n * @class\n * @ignore\n */\nclass TCPconnector {\n\n  /**\n    * Create an TCPConnector to connect to a fjage master over TCP\n    * @param {Object} opts\n    * @param {String} [opts.hostname='localhost'] - ip address/hostname of the master container to connect to\n    * @param {number} opts.port - port number of the master container to connect to\n    */\n  constructor(opts = {}) {\n    this.url = new URL('tcp://localhost');\n    let host = opts.hostname || 'localhost';\n    let port = opts.port || -1;\n    this.url.hostname = opts.hostname;\n    this.url.port = opts.port;\n    this._buf = '';\n    this.pendingOnOpen = [];              // list of callbacks make as soon as gateway is open\n    this.connListeners = [];              // external listeners wanting to listen connection events\n    this._sockInit(host, port);\n  }\n\n\n  _sendConnEvent(val) {\n    this.connListeners.forEach(l => {\n      l && {}.toString.call(l) === '[object Function]' && l(val);\n    });\n  }\n\n  _sockInit(host, port){\n    if (!createConnection){\n      try {\n        import('net').then(module => {\n          createConnection = module.createConnection;\n          this._sockSetup(host, port);\n        });\n      }catch(error){\n        if(this.debug) console.log('Unable to import net module');\n      }\n    }else {\n      this._sockSetup(host, port);\n    }  \n  }\n\n  _sockSetup(host, port){\n    if(!createConnection) return;\n    try{\n      this.sock = createConnection({ 'host': host, 'port': port });\n      this.sock.setEncoding('utf8');\n      this.sock.on('connect', this._onSockOpen.bind(this));\n      this.sock.on('error', this._sockReconnect.bind(this));\n      this.sock.on('close', () => {this._sendConnEvent(false);});\n      this.sock.send = data => {this.sock.write(data);};\n    } catch (error) {\n      if(this.debug) console.log('Connection failed to ', this.sock.host + ':' + this.sock.port);\n      return;\n    }\n  }\n\n  _sockReconnect(){\n    if (this._firstConn || !this.keepAlive || this.sock.readyState == SOCKET_OPENING || this.sock.readyState == SOCKET_OPEN) return;\n    if (this._firstReConn) this._sendConnEvent(false);\n    this._firstReConn = false;\n    if(this.debug) console.log('Reconnecting to ', this.sock.remoteAddress + ':' + this.sock.remotePort);\n    setTimeout(() => {\n      this.pendingOnOpen = [];\n      this._sockSetup(this.sock.url);\n    }, this._reconnectTime);\n  }\n\n  _onSockOpen() {\n    this._sendConnEvent(true);\n    this.sock.on('close', this._sockReconnect.bind(this));\n    this.sock.on('data', this._processSockData.bind(this));\n    this.pendingOnOpen.forEach(cb => cb());\n    this.pendingOnOpen.length = 0;\n    this._buf = '';\n  }\n\n  _processSockData(s){\n    this._buf += s;\n    var lines = this._buf.split('\\n');\n    lines.forEach((l, idx) => {\n      if (idx < lines.length-1){\n        if (l && this._onSockRx) this._onSockRx.call(this,l);\n      } else {\n        this._buf = l;\n      }\n    });\n  }\n\n  toString(){\n    let s = '';\n    s += 'TCPConnector [' + this.sock ? this.sock.remoteAddress.toString() + ':' + this.sock.remotePort.toString() : '' + ']';\n    return s;\n  }\n\n  /**\n   * Write a string to the connector\n   * @param {string} s - string to be written out of the connector to the master\n   * @return {boolean} - true if connect was able to write or queue the string to the underlying socket\n   */\n  write(s){\n    if (!this.sock || this.sock.readyState == SOCKET_OPENING){\n      this.pendingOnOpen.push(() => {\n        this.sock.send(s+'\\n');\n      });\n      return true;\n    } else if (this.sock.readyState == SOCKET_OPEN) {\n      this.sock.send(s+'\\n');\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Set a callback for receiving incoming strings from the connector\n   * @param {TCPConnector~ReadCallback} cb - callback that is called when the connector gets a string\n   */\n  setReadCallback(cb){\n    if (cb && {}.toString.call(cb) === '[object Function]') this._onSockRx = cb;\n  }\n\n  /**\n   * @callback TCPConnector~ReadCallback\n   * @ignore\n   * @param {string} s - incoming message string\n   */\n  \n  /**\n   * Add listener for connection events\n   * @param {function} listener - a listener callback that is called when the connection is opened/closed\n   */\n  addConnectionListener(listener){\n    this.connListeners.push(listener);\n  }\n\n  /**\n   * Remove listener for connection events\n   * @param {function} listener - remove the listener for connection\n   * @return {boolean} - true if the listner was removed successfully\n   */\n  removeConnectionListener(listener) {\n    let ndx = this.connListeners.indexOf(listener);\n    if (ndx >= 0) {\n      this.connListeners.splice(ndx, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Close the connector\n   */\n  close(){\n    if (!this.sock) return;\n    if (this.sock.readyState == SOCKET_OPENING) {\n      this.pendingOnOpen.push(() => {\n        this.sock.send('{\"alive\": false}\\n');\n        this.sock.onclose = null;\n        this.sock.destroy();\n      });\n    } else if (this.sock.readyState == SOCKET_OPEN) {\n      this.sock.send('{\"alive\": false}\\n');\n      this.sock.onclose = null;\n      this.sock.destroy();\n    }\n  }\n}\n\nconst DEFAULT_RECONNECT_TIME = 5000;       // ms, delay between retries to connect to the server.\n\n/**\n * @class\n * @ignore\n */\nclass WSConnector {\n\n  /**\n   * Create an WSConnector to connect to a fjage master over WebSockets\n   * @param {Object} opts\n   * @param {string} opts.hostname - hostname/ip address of the master container to connect to\n   * @param {number} opts.port - port number of the master container to connect to\n   * @param {string} opts.pathname - path of the master container to connect to\n   * @param {boolean} opts.keepAlive - try to reconnect if the connection is lost\n   * @param {number} [opts.reconnectTime=5000] - time before reconnection is attempted after an error\n   */\n  constructor(opts = {}) {\n    this.url = new URL('ws://localhost');\n    this.url.hostname = opts.hostname;      \n    this.url.port = opts.port;\n    this.url.pathname = opts.pathname;\n    this._reconnectTime = opts.reconnectTime || DEFAULT_RECONNECT_TIME;\n    this._keepAlive = opts.keepAlive;\n    this.debug = opts.debug || false;      // debug info to be logged to console?\n    this._firstConn = true;               // if the Gateway has managed to connect to a server before\n    this._firstReConn = true;             // if the Gateway has attempted to reconnect to a server before\n    this.pendingOnOpen = [];              // list of callbacks make as soon as gateway is open\n    this.connListeners = [];              // external listeners wanting to listen connection events\n    this._websockSetup(this.url);\n  }\n\n  _sendConnEvent(val) {\n    this.connListeners.forEach(l => {\n      l && {}.toString.call(l) === '[object Function]' && l(val);\n    });\n  }\n\n  _websockSetup(url){\n    try {\n      this.sock = new WebSocket(url);\n      this.sock.onerror = this._websockReconnect.bind(this);\n      this.sock.onopen = this._onWebsockOpen.bind(this);\n      this.sock.onclose = () => {this._sendConnEvent(false);};\n    } catch (error) {\n      if(this.debug) console.log('Connection failed to ', url);\n      return;\n    }\n  }\n\n  _websockReconnect(){\n    if (this._firstConn || !this._keepAlive || this.sock.readyState == this.sock.CONNECTING || this.sock.readyState == this.sock.OPEN) return;\n    if (this._firstReConn) this._sendConnEvent(false);\n    this._firstReConn = false;\n    if(this.debug) console.log('Reconnecting to ', this.sock.url);\n    setTimeout(() => {\n      this.pendingOnOpen = [];\n      this._websockSetup(this.sock.url);\n    }, this._reconnectTime);\n  }\n\n  _onWebsockOpen() {\n    if(this.debug) console.log('Connected to ', this.sock.url);\n    this._sendConnEvent(true);\n    this.sock.onclose = this._websockReconnect.bind(this);\n    this.sock.onmessage = event => { if (this._onWebsockRx) this._onWebsockRx.call(this,event.data); };\n    this._firstConn = false;\n    this._firstReConn = true;\n    this.pendingOnOpen.forEach(cb => cb());\n    this.pendingOnOpen.length = 0;\n  }\n\n  toString(){\n    let s = '';\n    s += 'WSConnector [' + this.sock ? this.sock.url.toString() : '' + ']';\n    return s;\n  }\n\n  /**\n   * Write a string to the connector\n   * @param {string} s - string to be written out of the connector to the master\n   */\n  write(s){\n    if (!this.sock || this.sock.readyState == this.sock.CONNECTING){\n      this.pendingOnOpen.push(() => {\n        this.sock.send(s+'\\n');\n      });\n      return true;\n    } else if (this.sock.readyState == this.sock.OPEN) {\n      this.sock.send(s+'\\n');\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Set a callback for receiving incoming strings from the connector\n   * @param {WSConnector~ReadCallback} cb - callback that is called when the connector gets a string\n   * @ignore\n   */\n  setReadCallback(cb){\n    if (cb && {}.toString.call(cb) === '[object Function]') this._onWebsockRx = cb;\n  }\n\n  /**\n   * @callback WSConnector~ReadCallback\n   * @ignore\n   * @param {string} s - incoming message string\n   */\n  \n  /**\n   * Add listener for connection events\n   * @param {function} listener - a listener callback that is called when the connection is opened/closed\n   */\n  addConnectionListener(listener){\n    this.connListeners.push(listener);\n  }\n\n  /**\n   * Remove listener for connection events\n   * @param {function} listener - remove the listener for connection\n   * @return {boolean} - true if the listner was removed successfully\n   */\n  removeConnectionListener(listener) {\n    let ndx = this.connListeners.indexOf(listener);\n    if (ndx >= 0) {\n      this.connListeners.splice(ndx, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Close the connector\n   */\n  close(){\n    if (!this.sock) return;\n    if (this.sock.readyState == this.sock.CONNECTING) {\n      this.pendingOnOpen.push(() => {\n        this.sock.send('{\"alive\": false}\\n');\n        this.sock.onclose = null;\n        this.sock.close();\n      });\n    } else if (this.sock.readyState == this.sock.OPEN) {\n      this.sock.send('{\"alive\": false}\\n');\n      this.sock.onclose = null;\n      this.sock.close();\n    }\n  }\n}\n\n/* global global Buffer */\n\nconst DEFAULT_QUEUE_SIZE = 128;        // max number of old unreceived messages to store\n\n/**\n * An action represented by a message. The performative actions are a subset of the\n * FIPA ACL recommendations for interagent communication.\n * @typedef {Object} Performative\n */\nconst Performative = {\n  REQUEST: 'REQUEST',               // Request an action to be performed\n  AGREE: 'AGREE',                   // Agree to performing the requested action\n  REFUSE: 'REFUSE',                 // Refuse to perform the requested action\n  FAILURE: 'FAILURE',               // Notification of failure to perform a requested or agreed action\n  INFORM: 'INFORM',                 // Notification of an event\n  CONFIRM: 'CONFIRM',               // Confirm that the answer to a query is true\n  DISCONFIRM: 'DISCONFIRM',         // Confirm that the answer to a query is false\n  QUERY_IF: 'QUERY_IF',             // Query if some statement is true or false\n  NOT_UNDERSTOOD: 'NOT_UNDERSTOOD', // Notification that a message was not understood\n  CFP: 'CFP',                       // Call for proposal\n  PROPOSE: 'PROPOSE',               // Response for CFP\n  CANCEL: 'CANCEL'                  // Cancel pending request\n};\n\n/**\n * An identifier for an agent or a topic.\n * @class\n * @param {string} name - name of the agent\n * @param {boolean} topic - name of topic\n * @param {Gateway} owner - Gateway owner for this AgentID\n */\nclass AgentID {\n\n\n  constructor(name, topic, owner) {\n    this.name = name;\n    this.topic = topic;\n    this.owner = owner;\n  }\n\n  /**\n   * Gets the name of the agent or topic.\n   *\n   * @returns {string} - name of agent or topic\n   */\n  getName() {\n    return this.name;\n  }\n\n  /**\n   * Returns true if the agent id represents a topic.\n   *\n   * @returns {boolean} - true if the agent id represents a topic, false if it represents an agent\n   */\n  isTopic() {\n    return this.topic;\n  }\n\n  /**\n   * Sends a message to the agent represented by this id.\n   *\n   * @param {string} msg - message to send\n   * @returns {void}\n   */\n  send(msg) {\n    msg.recipient = this.toJSON();\n    this.owner.send(msg);\n  }\n\n  /**\n   * Sends a request to the agent represented by this id and waits for a reponse.\n   *\n   * @param {Message} msg - request to send\n   * @param {number} [timeout=1000] - timeout in milliseconds\n   * @returns {Promise<Message>} - response\n   */\n  async request(msg, timeout=1000) {\n    msg.recipient = this.toJSON();\n    return this.owner.request(msg, timeout);\n  }\n\n  /**\n   * Gets a string representation of the agent id.\n   *\n   * @returns {string} - string representation of the agent id\n   */\n  toString() {\n    return this.toJSON() + ((this.owner && this.owner.connector) ? ` on ${this.owner.connector.url}` : '');\n  }\n\n  /**\n   * Gets a JSON string representation of the agent id.\n   *\n   * @returns {string} - JSON string representation of the agent id\n   */\n  toJSON() {\n    return (this.topic ? '#' : '') + this.name;\n  }\n\n  /**\n   * Sets parameter(s) on the Agent referred to by this AgentID.\n   *\n   * @param {(string|string[])} params - parameters name(s) to be set\n   * @param {(Object|Object[])} values - parameters value(s) to be set\n   * @param {number} [index=-1] - index of parameter(s) to be set\n   * @param {number} [timeout=5000] - timeout for the response\n   * @returns {Promise<(Object|Object[])>} - a promise which returns the new value(s) of the parameters\n   */\n  async set (params, values, index=-1, timeout=5000) {\n    if (!params) return null;\n    let msg = new ParameterReq();\n    msg.recipient = this.name;\n    if (Array.isArray(params)){\n      msg.requests = params.map((p, i) => {\n        return {\n          'param': p,\n          'value': values[i]\n        };\n      });\n    } else {\n      msg.param = params;\n      msg.value = values;\n    }\n    msg.index = Number.isInteger(index) ? index : -1;\n    const rsp = await this.owner.request(msg, timeout);\n    var ret = Array.isArray(params) ? new Array(params.length).fill(null) : null;\n    if (!rsp || rsp.perf != Performative.INFORM || !rsp.param) return ret;\n    if (Array.isArray(params)) {\n      if (!rsp.values) rsp.values = {};\n      if (rsp.param) rsp.values[rsp.param] = rsp.value;\n      const rvals = Object.keys(rsp.values);\n      return params.map( p => {\n        let f = rvals.find(rv => rv.endsWith(p));\n        return f ? rsp.values[f] : null;\n      });\n    } else {\n      return rsp.value;\n    }\n  }\n\n\n  /**\n   * Gets parameter(s) on the Agent referred to by this AgentID.\n   *\n   * @param {(?string|?string[])} params - parameters name(s) to be get, null implies get value of all parameters on the Agent\n   * @param {number} [index=-1] - index of parameter(s) to be get\n   * @param {number} [timeout=5000] - timeout for the response\n   * @returns {Promise<(?Object|?Object[])>} - a promise which returns the value(s) of the parameters\n   */\n  async get(params, index=-1, timeout=5000) {\n    let msg = new ParameterReq();\n    msg.recipient = this.name;\n    if (params){\n      if (Array.isArray(params)) msg.requests = params.map(p => {return {'param': p};});\n      else msg.param = params;\n    }\n    msg.index = Number.isInteger(index) ? index : -1;\n    const rsp = await this.owner.request(msg, timeout);\n    var ret = Array.isArray(params) ? new Array(params.length).fill(null) : null;\n    if (!rsp || rsp.perf != Performative.INFORM || (params && (!rsp.param))) return ret;\n    // Request for listing of all parameters.\n    if (!params) {\n      if (!rsp.values) rsp.values = {};\n      if (rsp.param) rsp.values[rsp.param] = rsp.value;\n      return rsp.values;\n    } else if (Array.isArray(params)) {\n      if (!rsp.values) rsp.values = {};\n      if (rsp.param) rsp.values[rsp.param] = rsp.value;\n      const rvals = Object.keys(rsp.values);\n      return params.map(p => {\n        let f = rvals.find(rv => rv.endsWith(p));\n        return f ? rsp.values[f] : null;\n      });\n    } else {\n      return rsp.value;\n    }\n  }\n}\n\n/**\n * Base class for messages transmitted by one agent to another. Creates an empty message.\n * @class\n * @param {Message} inReplyTo - message to which this response corresponds to\n * @param {Performative} - performative\n */\nclass Message {\n\n  constructor(inReplyTo={msgID:null, sender:null}, perf='') {\n    this.__clazz__ = 'org.arl.fjage.Message';\n    this.msgID = _guid(8);\n    this.sender = null;\n    this.recipient = inReplyTo.sender;\n    this.perf = perf;\n    this.inReplyTo = inReplyTo.msgID || null;\n  }\n\n  /**\n   * Gets a string representation of the message.\n   *\n   * @returns {string} - string representation\n   */\n  toString() {\n    let s = '';\n    let suffix = '';\n    if (!this.__clazz__) return '';\n    let clazz = this.__clazz__;\n    clazz = clazz.replace(/^.*\\./, '');\n    let perf = this.perf;\n    for (var k in this) {\n      if (k.startsWith('__')) continue;\n      if (k == 'sender') continue;\n      if (k == 'recipient') continue;\n      if (k == 'msgID') continue;\n      if (k == 'perf') continue;\n      if (k == 'inReplyTo') continue;\n      if (typeof this[k] == 'object') {\n        suffix = ' ...';\n        continue;\n      }\n      s += ' ' + k + ':' + this[k];\n    }\n    s += suffix;\n    return clazz+':'+perf+'['+s.replace(/^ /, '')+']';\n  }\n\n  // convert a message into a JSON string\n  // NOTE: we don't do any base64 encoding for TX as\n  //       we don't know what data type is intended\n  /** @private */\n  _serialize() {\n    let clazz = this.__clazz__ || 'org.arl.fjage.Message';\n    let data = JSON.stringify(this, (k,v) => {\n      if (k.startsWith('__')) return;\n      return v;\n    });\n    return '{ \"clazz\": \"'+clazz+'\", \"data\": '+data+' }';\n  }\n\n  // inflate a data dictionary into the message\n  /** @private */\n  _inflate(data) {\n    for (var key in data)\n      this[key] = data[key];\n  }\n\n  // convert a dictionary (usually from decoding JSON) into a message\n  /** @private */\n  static _deserialize(obj) {\n    if (typeof obj == 'string' || obj instanceof String) {\n      try {\n        obj = JSON.parse(obj);\n      }catch(e){\n        return null;\n      }\n    }\n    let qclazz = obj.clazz;\n    let clazz = qclazz.replace(/^.*\\./, '');\n    let rv = MessageClass[clazz] ? new MessageClass[clazz] : new Message();\n    rv.__clazz__ = qclazz;\n    rv._inflate(obj.data);\n    return rv;\n  }\n}\n\n/**\n * A message class that can convey generic messages represented by key-value pairs.\n * @class\n * @extends Message\n */\nclass GenericMessage extends Message {\n  /**\n   * Creates an empty generic message.\n   */\n  constructor() {\n    super();\n    this.__clazz__ = 'org.arl.fjage.GenericMessage';\n  }\n}\n\n/**\n * A gateway for connecting to a fjage master container. The new version of the constructor\n * uses an options object instead of individual parameters. The old version with \n * \n * \n * @class\n * @param {Object} opts\n * @param {string} [opts.hostname=\"localhost\"] - hostname/ip address of the master container to connect to\n * @param {number} [opts.port=1100]          - port number of the master container to connect to\n * @param {string} [opts.pathname=\"\"]        - path of the master container to connect to (for WebSockets)\n * @param {string} [opts.keepAlive=true]     - try to reconnect if the connection is lost\n * @param {number} [opts.queueSize=128]      - size of the queue of received messages that haven't been consumed yet\n * @param {number} [opts.timeout=1000]       - timeout for fjage level messages in ms\n * @param {string} [hostname=\"localhost\"]    - <strike>Deprecated : hostname/ip address of the master container to connect to</strike>\n * @param {number} [port=]                   - <strike>Deprecated : port number of the master container to connect to</strike>\n * @param {string} [pathname==\"/ws/\"]        - <strike>Deprecated : path of the master container to connect to (for WebSockets)</strike>\n * @param {number} [timeout=1000]            - <strike>Deprecated : timeout for fjage level messages in ms</strike>\n */\nclass Gateway {\n\n  constructor(opts = {}, port, pathname='/ws/', timeout=1000) {\n    // Support for deprecated constructor\n    if (typeof opts === 'string' || opts instanceof String){\n      opts = {\n        'hostname': opts,\n        'port' : port || gObj.location.port, \n        'pathname' : pathname,\n        'timeout' : timeout\n      };\n      console.warn('Deprecated use of Gateway constructor');\n    }\n    opts = Object.assign({}, GATEWAY_DEFAULTS, opts);\n    var url = DEFAULT_URL;\n    url.hostname = opts.hostname;\n    url.port = opts.port;\n    url.pathname = opts.pathname;\n    let existing = this._getGWCache(url);\n    if (existing) return existing;\n    this._timeout = opts.timeout;         // timeout for fjage level messages (agentForService etc)\n    this._keepAlive = opts.keepAlive;     // reconnect if connection gets closed/errored\n    this._queueSize = opts.queueSize;      // size of queue\n    this.pending = {};                    // msgid to callback mapping for pending requests to server\n    this.subscriptions = {};              // hashset for all topics that are subscribed\n    this.listener = {};                   // set of callbacks that want to listen to incoming messages\n    this.eventListeners = {};             // external listeners wanting to listen internal events\n    this.queue = [];                      // incoming message queue\n    this.debug = false;                   // debug info to be logged to console?\n    this.aid = new AgentID(isBrowser ? 'WebGW-' : 'NodeGW-'+_guid(4));         // gateway agent name\n    this.connector = this._createConnector(url);\n    this._addGWCache(this);\n  }\n\n  /** @private */\n  _sendEvent(type, val) {\n    if (Array.isArray(this.eventListeners[type])) {\n      this.eventListeners[type].forEach(l => {\n        l && {}.toString.call(l) === '[object Function]' && l(val);\n      });\n    }\n  }\n\n  /** @private */\n  _onMsgRx(data) {\n    var obj;\n    if (this.debug) console.log('< '+data);\n    this._sendEvent('rx', data);\n    try {\n      obj = JSON.parse(data, _decodeBase64);\n    }catch(e){\n      return;\n    }\n    this._sendEvent('rxp', obj);\n    if ('id' in obj && obj.id in this.pending) {\n      // response to a pending request to master\n      this.pending[obj.id](obj);\n      delete this.pending[obj.id];\n    } else if (obj.action == 'send') {\n      // incoming message from master\n      let msg = Message._deserialize(obj.message);\n      if (!msg) return;\n      this._sendEvent('rxmsg', msg);\n      if ((msg.recipient == this.aid.toJSON() )|| this.subscriptions[msg.recipient]) {\n        var consumed = false;\n        if (Array.isArray(this.eventListeners['message'])){\n          for (var i = 0; i < this.eventListeners['message'].length; i++) {\n            if (this.eventListeners['message'][i](msg)) {\n              consumed = true;\n              break;\n            }\n          }\n        }\n        // iterate over internal callbacks, until one consumes the message\n        for (var key in this.listener){\n          // callback returns true if it has consumed the message\n          if (this.listener[key](msg)) {\n            consumed = true;\n            break;\n          }\n        }\n        if(!consumed) {\n          if (this.queue.length >= this._queueSize) this.queue.shift();\n          this.queue.push(msg);\n        }\n      }\n    } else {\n      // respond to standard requests that every container must\n      let rsp = { id: obj.id, inResponseTo: obj.action };\n      switch (obj.action) {\n      case 'agents':\n        rsp.agentIDs = [this.aid.getName()];\n        break;\n      case 'containsAgent':\n        rsp.answer = (obj.agentID == this.aid.getName());\n        break;\n      case 'services':\n        rsp.services = [];\n        break;\n      case 'agentForService':\n        rsp.agentID = '';\n        break;\n      case 'agentsForService':\n        rsp.agentIDs = [];\n        break;\n      default:\n        rsp = undefined;\n      }\n      if (rsp) this._msgTx(rsp);\n    }\n  }\n\n  /** @private */\n  _msgTx(s) {\n    if (typeof s != 'string' && !(s instanceof String)) s = JSON.stringify(s);\n    if(this.debug) console.log('> '+s);\n    this._sendEvent('tx', s);\n    return this.connector.write(s);\n  }\n\n  /** @private */\n  _msgTxRx(rq) {\n    rq.id = _guid(8);\n    return new Promise(resolve => {\n      let timer = setTimeout(() => {\n        delete this.pending[rq.id];\n        if (this.debug) console.log('Receive Timeout : ' + rq);\n        resolve();\n      }, 8*this._timeout);\n      this.pending[rq.id] = rsp => {\n        clearTimeout(timer);\n        resolve(rsp);\n      };\n      if (!this._msgTx.call(this,rq)) {\n        clearTimeout(timer);\n        delete this.pending[rq.id];\n        if (this.debug) console.log('Transmit Timeout : ' + rq);\n        resolve();\n      }\n    });\n  }\n\n  /** @private */\n  _createConnector(url){\n    let conn;\n    if (url.protocol.startsWith('ws')){\n      conn =  new WSConnector({\n        'hostname':url.hostname,\n        'port':url.port,\n        'pathname':url.pathname,\n        'keepAlive': this._keepAlive\n      });\n    }else if (url.protocol.startsWith('tcp')){\n      conn = new TCPconnector({\n        'hostname':url.hostname,\n        'port':url.port,\n        'keepAlive': this._keepAlive\n      });\n    } else return null;\n    conn.setReadCallback(this._onMsgRx.bind(this));\n    conn.addConnectionListener(state => {\n      if (state == true){\n        this.flush();\n        this.connector.write('{\"alive\": true}');\n        this._update_watch();\n      }\n    });\n    return conn;\n  }\n\n  /** @private */\n  _matchMessage(filter, msg){\n    if (typeof filter == 'string' || filter instanceof String) {\n      return 'inReplyTo' in msg && msg.inReplyTo == filter;\n    } else if (Object.prototype.hasOwnProperty.call(filter, 'msgID')) {\n      return 'inReplyTo' in msg && msg.inReplyTo == filter.msgID;\n    } else if (filter.__proto__.name == 'Message') {\n      return filter.__clazz__ == msg.__clazz__;\n    } else if (typeof filter == 'function') {\n      return filter(msg);\n    } else {\n      return msg instanceof filter;\n    }\n  }\n\n  /** @private */\n  _getMessageFromQueue(filter) {\n    if (!this.queue.length) return;\n    if (!filter) return this.queue.shift();\n\n    let matchedMsg = this.queue.find( msg => this._matchMessage(filter, msg));\n    if (matchedMsg) this.queue.splice(this.queue.indexOf(matchedMsg), 1);\n\n    return matchedMsg;\n  }\n\n  /** @private */\n  _getGWCache(url){\n    if (!gObj.fjage || !gObj.fjage.gateways) return null;\n    var f = gObj.fjage.gateways.filter(g => g.connector.url.toString() == url.toString());\n    if (f.length ) return f[0];\n    return null;\n  }\n  \n  /** @private */\n  _addGWCache(gw){\n    if (!gObj.fjage || !gObj.fjage.gateways) return;\n    gObj.fjage.gateways.push(gw);\n  }\n  \n  /** @private */\n  _removeGWCache(gw){\n    if (!gObj.fjage || !gObj.fjage.gateways) return;\n    var index = gObj.fjage.gateways.indexOf(gw);\n    if (index != null) gObj.fjage.gateways.splice(index,1);\n  }\n\n  /** @private */\n  _update_watch() {\n    // FIXME : Turning off wantsMessagesFor in fjagejs for now as it breaks multiple browser\n    // windows connecting to the same master container.\n    //\n    // let watch = Object.keys(this.subscriptions);\n    // watch.push(this.aid.getName());\n    // let rq = { action: 'wantsMessagesFor', agentIDs: watch };\n    // this._msgTx(rq);\n  }\n\n  /**\n   * Add an event listener to listen to various events happening on this Gateway\n   *\n   * @param {string} type - type of event to be listened to\n   * @param {function} listener - new callback/function to be called when the event happens\n   * @returns {void}\n   */\n  addEventListener(type, listener) {\n    if (!Array.isArray(this.eventListeners[type])){\n      this.eventListeners[type] = [];\n    }\n    this.eventListeners[type].push(listener);\n  }\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {string} type - type of event the listener was for\n   * @param {function} listener - callback/function which was to be called when the event happens\n   * @returns {void}\n   */\n  removeEventListener(type, listener) {\n    if (!this.eventListeners[type]) return;\n    let ndx = this.eventListeners[type].indexOf(listener);\n    if (ndx >= 0) this.eventListeners[type].splice(ndx, 1);\n  }\n\n  /**\n   * Add a new listener to listen to all {Message}s sent to this Gateway\n   *\n   * @param {function} listener - new callback/function to be called when a {Message} is received\n   * @returns {void}\n   */\n  addMessageListener(listener) {\n    this.addEventListener('message',listener);\n  }\n\n  /**\n   * Remove a message listener.\n   *\n   * @param {function} listener - removes a previously registered listener/callback\n   * @returns {void}\n   */\n  removeMessageListener(listener) {\n    this.removeEventListener('message', listener);\n  }\n\n  /**\n   * Add a new listener to get notified when the connection to master is created and terminated.\n   *\n   * @param {function} listener - new callback/function to be called connection to master is created and terminated\n   * @returns {void}\n   */\n  addConnListener(listener) {\n    this.addEventListener('conn', listener);\n  }\n\n  /**\n   * Remove a connection listener.\n   *\n   * @param {function} listener - removes a previously registered listener/callback\n   * @returns {void}\n   */\n  removeConnListener(listener) {\n    this.removeEventListener('conn', listener);\n  }\n\n  /**\n   * Gets the agent ID associated with the gateway.\n   *\n   * @returns {string} - agent ID\n   */\n  getAgentID() {\n    return this.aid;\n  }\n\n  /**\n   * Get an AgentID for a given agent name.\n   *\n   * @param {string} name - name of agent\n   * @returns {AgentID} - AgentID for the given name\n   */\n  agent(name) {\n    return new AgentID(name, false, this);\n  }\n\n  /**\n   * Returns an object representing the named topic.\n   *\n   * @param {string|AgentID} topic - name of the topic or AgentID\n   * @param {string} topic2 - name of the topic if the topic param is an AgentID\n   * @returns {AgentID} - object representing the topic\n   */\n  topic(topic, topic2) {\n    if (typeof topic == 'string' || topic instanceof String) return new AgentID(topic, true, this);\n    if (topic instanceof AgentID) {\n      if (topic.isTopic()) return topic;\n      return new AgentID(topic.getName()+(topic2 ? '__' + topic2 : '')+'__ntf', true, this);\n    }\n  }\n\n  /**\n   * Subscribes the gateway to receive all messages sent to the given topic.\n   *\n   * @param {AgentID} topic - the topic to subscribe to\n   * @returns {boolean} - true if the subscription is successful, false otherwise\n   */\n  subscribe(topic) {\n    if (!topic.isTopic()) topic = new AgentID(topic.getName() + '__ntf', true, this);\n    this.subscriptions[topic.toJSON()] = true;\n    this._update_watch();\n  }\n\n  /**\n   * Unsubscribes the gateway from a given topic.\n   *\n   * @param {AgentID} topic - the topic to unsubscribe\n   * @returns {void}\n   */\n  unsubscribe(topic) {\n    if (!topic.isTopic()) topic = new AgentID(topic.getName() + '__ntf', true, this);\n    delete this.subscriptions[topic.toJSON()];\n    this._update_watch();\n  }\n\n  /**\n   * Finds an agent that provides a named service. If multiple agents are registered\n   * to provide a given service, any of the agents' id may be returned.\n   *\n   * @param {string} service - the named service of interest\n   * @returns {Promise<?AgentID>} - a promise which returns an agent id for an agent that provides the service when resolved\n   */\n  async agentForService(service) {\n    let rq = { action: 'agentForService', service: service };\n    let rsp = await this._msgTxRx(rq);\n    if (!rsp || !rsp.agentID) return;\n    return new AgentID(rsp.agentID, false, this);\n  }\n\n  /**\n   * Finds all agents that provides a named service.\n   *\n   * @param {string} service - the named service of interest\n   * @returns {Promise<?AgentID[]>} - a promise which returns an array of all agent ids that provides the service when resolved\n   */\n  async agentsForService(service) {\n    let rq = { action: 'agentsForService', service: service };\n    let rsp = await this._msgTxRx(rq);\n    let aids = [];\n    if (!rsp || !Array.isArray(rsp.agentIDs)) return aids;\n    for (var i = 0; i < rsp.agentIDs.length; i++)\n      aids.push(new AgentID(rsp.agentIDs[i], false, this));\n    return aids;\n  }\n\n  /**\n   * Sends a message to the recipient indicated in the message. The recipient\n   * may be an agent or a topic.\n   *\n   * @param {Message} msg - message to be sent\n   * @returns {boolean} - if sending was successful\n   */\n  send(msg) {\n    msg.sender = this.aid.toJSON();\n    if (msg.perf == '') {\n      if (msg.__clazz__.endsWith('Req')) msg.perf = Performative.REQUEST;\n      else msg.perf = Performative.INFORM;\n    }\n    this._sendEvent('txmsg', msg);\n    let rq = JSON.stringify({ action: 'send', relay: true, message: '###MSG###' });\n    rq = rq.replace('\"###MSG###\"', msg._serialize());\n    return !!this._msgTx(rq);\n  }\n\n  /**\n   * Flush the Gateway queue for all pending messages. This drops all the pending messages.\n   * @returns {void}\n   *\n   */\n  flush() {\n    this.queue.length = 0;\n  }\n\n  /**\n   * Sends a request and waits for a response. This method returns a {Promise} which resolves when a response \n   * is received or if no response is received after the timeout.\n   *\n   * @param {string} msg - message to send\n   * @param {number} [timeout=1000] - timeout in milliseconds\n   * @returns {Promise<?Message>} - a promise which resolves with the received response message, null on timeout\n   */\n  async request(msg, timeout=1000) {\n    this.send(msg);\n    return this.receive(msg, timeout);\n  }\n\n  /**\n   * Returns a response message received by the gateway. This method returns a {Promise} which resolves when \n   * a response is received or if no response is received after the timeout.\n   *\n   * @param {function} [filter=] - original message to which a response is expected, or a MessageClass of the type \n   * of message to match, or a closure to use to match against the message\n   * @param {number} [timeout=0] - timeout in milliseconds\n   * @returns {Promise<?Message>} - received response message, null on timeout\n   */\n  async receive(filter, timeout=0) {\n    return new Promise(resolve => {\n      let msg = this._getMessageFromQueue.call(this,filter);\n      if (msg) {\n        resolve(msg);\n        return;\n      }\n      if (timeout == 0) {\n        if (this.debug) console.log('Receive Timeout : ' + filter);\n        resolve();\n        return;\n      }\n      let lid = _guid(8);\n      let timer;\n      if (timeout > 0){\n        timer = setTimeout(() => {\n          delete this.listener[lid];\n          if (this.debug) console.log('Receive Timeout : ' + filter);\n          resolve();\n        }, timeout);\n      }\n      this.listener[lid] = msg => {\n        if (!this._matchMessage(filter, msg)) return false;\n        if(timer) clearTimeout(timer);\n        delete this.listener[lid];\n        resolve(msg);\n        return true;\n      };\n    });\n  }\n\n  /**\n   * Closes the gateway. The gateway functionality may not longer be accessed after\n   * this method is called.\n   * @returns {void}\n   */\n  close() {\n    this.connector.close();\n    this._removeGWCache(this);\n  }\n\n}\n\n/**\n * Services supported by fjage agents.\n */\nconst Services = {\n  SHELL : 'org.arl.fjage.shell.Services.SHELL'\n};\n\n/**\n * Creates a unqualified message class based on a fully qualified name.\n * @param {string} name - fully qualified name of the message class to be created\n * @param {class} [parent=Message] - class of the parent MessageClass to inherit from\n * @returns {function} - constructor for the unqualified message class\n * @example \n * const ParameterReq = MessageClass('org.arl.fjage.param.ParameterReq');\n * let pReq = new ParameterReq()\n */\nfunction MessageClass(name, parent=Message) {\n  let sname = name.replace(/^.*\\./, '');\n  if (MessageClass[sname]) return MessageClass[sname];\n  let cls = class extends parent {\n    constructor(params) {\n      super();\n      this.__clazz__ = name;\n      if (params){\n        const keys = Object.keys(params);\n        for (let k of keys) {\n          this[k] = params[k];\n        }\n      }\n    }\n  };\n  cls.__clazz__ = name;\n  MessageClass[sname] = cls;\n  return cls;\n}\n\n////// private utilities\n\n// generate random ID with length 4*len characters\n/** @private */\nfunction _guid(len) {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n  let s = s4();\n  for (var i = 0; i < len-1; i++)\n    s += s4();\n  return s;\n}\n  \n// convert from base 64 to array\n/** @private */\nfunction _b64toArray(base64, dtype, littleEndian=true) {\n  let s = gObj.atob(base64);\n  let len = s.length;\n  let bytes = new Uint8Array(len);\n  for (var i = 0; i < len; i++)\n    bytes[i] = s.charCodeAt(i);\n  let rv = [];\n  let view = new DataView(bytes.buffer);\n  switch (dtype) {\n  case '[B': // byte array\n    for (i = 0; i < len; i++)\n      rv.push(view.getUint8(i));\n    break;\n  case '[S': // short array\n    for (i = 0; i < len; i+=2)\n      rv.push(view.getInt16(i, littleEndian));\n    break;\n  case '[I': // integer array\n    for (i = 0; i < len; i+=4)\n      rv.push(view.getInt32(i, littleEndian));\n    break;\n  case '[J': // long array\n    for (i = 0; i < len; i+=8)\n      rv.push(view.getInt64(i, littleEndian));\n    break;\n  case '[F': // float array\n    for (i = 0; i < len; i+=4)\n      rv.push(view.getFloat32(i, littleEndian));\n    break;\n  case '[D': // double array\n    for (i = 0; i < len; i+=8)\n      rv.push(view.getFloat64(i, littleEndian));\n    break;\n  default:\n    return;\n  }\n  return rv;\n}\n\n// base 64 JSON decoder\n/** @private */\nfunction _decodeBase64(k, d) {\n  if (d === null) {\n    return null;\n  }\n  if (typeof d == 'object' && 'clazz' in d) {\n    let clazz = d.clazz;\n    if (clazz.startsWith('[') && clazz.length == 2 && 'data' in d) {\n      let x = _b64toArray(d.data, d.clazz);\n      if (x) d = x;\n    }\n  }\n  return d;\n}\n\n////// global\n\nconst GATEWAY_DEFAULTS = {};\nlet gObj = {};\nlet DEFAULT_URL;\nif (isBrowser || isWebWorker){\n  gObj = window;\n  Object.assign(GATEWAY_DEFAULTS, {\n    'hostname': gObj.location.hostname,\n    'port': gObj.location.port,\n    'pathname' : '/ws/',\n    'timeout': 1000,\n    'keepAlive' : true,\n    'queueSize': DEFAULT_QUEUE_SIZE\n  });\n  DEFAULT_URL = new URL('ws://localhost');\n  // Enable caching of Gateways\n  if (typeof gObj.fjage === 'undefined') gObj.fjage = {};\n  if (typeof gObj.fjage.gateways == 'undefined')gObj.fjage.gateways = [];\n} else if (isJsDom || isNode){\n  gObj = global;\n  Object.assign(GATEWAY_DEFAULTS, {\n    'hostname': 'localhost',\n    'port': '1100',\n    'pathname': '',\n    'timeout': 1000,\n    'keepAlive' : true,\n    'queueSize': DEFAULT_QUEUE_SIZE\n  });\n  DEFAULT_URL = new URL('tcp://localhost');\n  gObj.atob = a => Buffer.from(a, 'base64').toString('binary');\n}\n\nconst ParameterReq = MessageClass('org.arl.fjage.param.ParameterReq');\n\nexport { AgentID, Gateway, GenericMessage, Message, MessageClass, Performative, Services };\n","import {AgentID, MessageClass, Services} from 'fjage';\n\nconst DatagramReq = MessageClass('org.arl.unet.DatagramReq');\nconst DatagramNtf = MessageClass('org.arl.unet.DatagramNtf');\nconst BasebandSignal = MessageClass('org.arl.unet.bb.BasebandSignal');\n\nlet UnetServices = {\n  'NODE_INFO': 'org.arl.unet.Services.NODE_INFO',\n  'ADDRESS_RESOLUTION': 'org.arl.unet.Services.ADDRESS_RESOLUTION',\n  'DATAGRAM': 'org.arl.unet.Services.DATAGRAM',\n  'PHYSICAL': 'org.arl.unet.Services.PHYSICAL',\n  'RANGING': 'org.arl.unet.Services.RANGING',\n  'BASEBAND': 'org.arl.unet.Services.BASEBAND',\n  'LINK': 'org.arl.unet.Services.LINK',\n  'MAC': 'org.arl.unet.Services.MAC',\n  'ROUTING': 'org.arl.unet.Services.ROUTING',\n  'ROUTE_MAINTENANCE': 'org.arl.unet.Services.ROUTE_MAINTENANCE',\n  'TRANSPORT': 'org.arl.unet.Services.TRANSPORT',\n  'REMOTE': 'org.arl.unet.Services.REMOTE',\n  'STATE_MANAGER': 'org.arl.unet.Services.STATE_MANAGER',\n  'DEVICE_INFO': 'org.arl.unet.Services.DEVICE_INFO',\n  'DOA': 'org.arl.unet.Services.DOA'\n};\n\nObject.assign(Services, UnetServices);\n\n/**\n * Well-known protocol number assignments used in UnetStack\n * @typedef {Object.<string, number>} Protocol\n */\nlet Protocol = {\n  'DATA' : 0,               // Protocol number for user application data.\n  'RANGING' : 1,            // Protocol number for use by ranging agents.\n  'LINK' : 2,               // Protocol number for use by link agents.\n  'REMOTE' : 3,             // Protocol number for use by remote management agents.\n  'MAC' : 4,                // Protocol number for use by MAC protocol agents.\n  'ROUTING' : 5,            // Protocol number for use by routing agents.\n  'TRANSPORT' : 6,          // Protocol number for use by transport agents.\n  'ROUTE_MAINTENANCE' : 7,   // Protocol number for use by route maintenance agents.\n  'LINK2' : 8,              // Protocol number for use by secondary link agents.\n  'USER' : 32,              // Lowest protocol number allowable for user protocols.\n  'MAX' : 63,               // Largest protocol number allowable.\n};\n\n/**\n * Well-known protocol Messages used in UnetStack\n * @typedef {Object.<string, MessageClass>} UnetMessages\n */\nlet UnetMessages = {\n  // unet\n  'TestReportNtf'          : MessageClass('org.arl.unet.TestReportNtf'),\n  'AbnormalTerminationNtf' : MessageClass('org.arl.unet.AbnormalTerminationNtf'),\n  'CapabilityListRsp'      : MessageClass('org.arl.unet.CapabilityListRsp'),\n  'CapabilityReq'          : MessageClass('org.arl.unet.CapabilityReq'),\n  'ClearReq'               : MessageClass('org.arl.unet.ClearReq'),\n  'DatagramCancelReq'      : MessageClass('org.arl.unet.DatagramCancelReq'),\n  'DatagramDeliveryNtf'    : MessageClass('org.arl.unet.DatagramDeliveryNtf'),\n  'DatagramFailureNtf'     : MessageClass('org.arl.unet.DatagramFailureNtf'),\n  'DatagramNtf'            : MessageClass('org.arl.unet.DatagramNtf'),\n  'DatagramProgressNtf'    : MessageClass('org.arl.unet.DatagramProgressNtf'),\n  'DatagramReq'            : MessageClass('org.arl.unet.DatagramReq'),\n  'ParamChangeNtf'         : MessageClass('org.arl.unet.ParamChangeNtf'),\n  'RefuseRsp'              : MessageClass('org.arl.unet.RefuseRsp'),\n  'FailureNtf'             : MessageClass('org.arl.unet.FailureNtf'),\n\n  // net\n  'DatagramTraceReq'       : MessageClass('org.arl.unet.net.DatagramTraceReq'),\n  'RouteDiscoveryReq'      : MessageClass('org.arl.unet.net.RouteDiscoveryReq'),\n  'RouteTraceReq'          : MessageClass('org.arl.unet.net.RouteTraceReq'),\n  'RouteDiscoveryNtf'      : MessageClass('org.arl.unet.net.RouteDiscoveryNtf'),\n  'RouteTraceNtf'          : MessageClass('org.arl.unet.net.RouteTraceNtf'),\n\n  // phy\n  'FecDecodeReq'           : MessageClass('org.arl.unet.phy.FecDecodeReq'),\n  'RxJanusFrameNtf'        : MessageClass('org.arl.unet.phy.RxJanusFrameNtf'),\n  'TxJanusFrameReq'        : MessageClass('org.arl.unet.phy.TxJanusFrameReq'),\n  'BadFrameNtf'            : MessageClass('org.arl.unet.phy.BadFrameNtf'),\n  'BadRangeNtf'            : MessageClass('org.arl.unet.phy.BadRangeNtf'),\n  'ClearSyncReq'           : MessageClass('org.arl.unet.phy.ClearSyncReq'),\n  'CollisionNtf'           : MessageClass('org.arl.unet.phy.CollisionNtf'),\n  'RxFrameNtf'             : MessageClass('org.arl.unet.phy.RxFrameNtf', DatagramNtf),\n  'RxFrameStartNtf'        : MessageClass('org.arl.unet.phy.RxFrameStartNtf'),\n  'SyncInfoReq'            : MessageClass('org.arl.unet.phy.SyncInfoReq'),\n  'SyncInfoRsp'            : MessageClass('org.arl.unet.phy.SyncInfoRsp'),\n  'TxFrameNtf'             : MessageClass('org.arl.unet.phy.TxFrameNtf'),\n  'TxFrameReq'             : MessageClass('org.arl.unet.phy.TxFrameReq', DatagramReq),\n  'TxFrameStartNtf'        : MessageClass('org.arl.unet.phy.TxFrameStartNtf'),\n  'TxRawFrameReq'          : MessageClass('org.arl.unet.phy.TxRawFrameReq'),\n\n  // addr\n  'AddressAllocReq'        : MessageClass('org.arl.unet.addr.AddressAllocReq'),\n  'AddressAllocRsp'        : MessageClass('org.arl.unet.addr.AddressAllocRsp'),\n  'AddressResolutionReq'   : MessageClass('org.arl.unet.addr.AddressResolutionReq'),\n  'AddressResolutionRsp'   : MessageClass('org.arl.unet.addr.AddressResolutionRsp'),\n\n  // bb\n  'BasebandSignal'         : MessageClass('org.arl.unet.bb.BasebandSignal'),\n  'RecordBasebandSignalReq' : MessageClass('org.arl.unet.bb.RecordBasebandSignalReq'),\n  'RxBasebandSignalNtf'    : MessageClass('org.arl.unet.bb.RxBasebandSignalNtf', BasebandSignal),\n  'TxBasebandSignalReq'    : MessageClass('org.arl.unet.bb.TxBasebandSignalReq', BasebandSignal),\n\n  // link\n  'LinkStatusNtf'          : MessageClass('org.arl.unet.link.LinkStatusNtf'),\n\n  // localization\n  'RangeNtf'               : MessageClass('org.arl.unet.localization.RangeNtf'),\n  'RangeReq'               : MessageClass('org.arl.unet.localization.RangeReq'),\n  'BeaconReq'              : MessageClass('org.arl.unet.localization.BeaconReq'),\n  'RespondReq'             : MessageClass('org.arl.unet.localization.RespondReq'),\n  'InterrogationNtf'       : MessageClass('org.arl.unet.localization.InterrogationNtf'),\n\n\n  // mac\n  'ReservationAcceptReq'   : MessageClass('org.arl.unet.mac.ReservationAcceptReq'),\n  'ReservationCancelReq'   : MessageClass('org.arl.unet.mac.ReservationCancelReq'),\n  'ReservationReq'         : MessageClass('org.arl.unet.mac.ReservationReq'),\n  'ReservationRsp'         : MessageClass('org.arl.unet.mac.ReservationRsp'),\n  'ReservationStatusNtf'   : MessageClass('org.arl.unet.mac.ReservationStatusNtf'),\n  'RxAckNtf'               : MessageClass('org.arl.unet.mac.RxAckNtf'),\n  'TxAckReq'               : MessageClass('org.arl.unet.mac.TxAckReq'),\n\n\n  // remote\n  'RemoteExecReq'          : MessageClass('org.arl.unet.remote.RemoteExecReq'),\n  'RemoteFailureNtf'       : MessageClass('org.arl.unet.remote.RemoteFailureNtf'),\n  'RemoteFileGetReq'       : MessageClass('org.arl.unet.remote.RemoteFileGetReq'),\n  'RemoteFileNtf'          : MessageClass('org.arl.unet.remote.RemoteFileNtf'),\n  'RemoteFilePutReq'       : MessageClass('org.arl.unet.remote.RemoteFilePutReq'),\n  'RemoteSuccessNtf'       : MessageClass('org.arl.unet.remote.RemoteSuccessNtf'),\n  'RemoteTextNtf'          : MessageClass('org.arl.unet.remote.RemoteTextNtf'),\n  'RemoteTextReq'          : MessageClass('org.arl.unet.remote.RemoteTextReq'),\n\n  // scheduler\n  'AddScheduledSleepReq'   : MessageClass('org.arl.unet.scheduler.AddScheduledSleepReq'),\n  'GetSleepScheduleReq'    : MessageClass('org.arl.unet.scheduler.GetSleepScheduleReq'),\n  'RemoveScheduledSleepReq' : MessageClass('org.arl.unet.scheduler.RemoveScheduledSleepReq'),\n  'SleepScheduleRsp'       : MessageClass('org.arl.unet.scheduler.SleepScheduleRsp'),\n  'WakeFromSleepNtf'       : MessageClass('org.arl.unet.scheduler.WakeFromSleepNtf'),\n\n  // state\n  'ClearStateReq'          : MessageClass('org.arl.unet.state.ClearStateReq'),\n  'SaveStateReq'           : MessageClass('org.arl.unet.state.SaveStateReq')\n};\n\n/*\n* To convert the local coordinates to GPS.\n*/\nexport function toGps(origin, x, y) {\n  let coords = [] ;\n  let [xScale,yScale] = _initConv(origin[0]);\n  coords[1] = x/xScale + origin[1];\n  coords[0] = y/yScale + origin[0];\n  return coords;\n}\n\n/*\n* To convert the GPS coordinates to local coordinates.\n*/\nexport function toLocal(origin, lat, lng) {\n  let pos = [];\n  let [xScale,yScale] = _initConv(origin[0]);\n  pos[0] = (lng-origin[1]) * xScale;\n  pos[1] = (lat-origin[0]) * yScale;  \n  return pos;\n}\n\nfunction _initConv(lat){\n  let rlat = lat * Math.PI/180;\n  let yScale = 111132.92 - 559.82*Math.cos(2*rlat) + 1.175*Math.cos(4*rlat) - 0.0023*Math.cos(6*rlat);\n  let xScale = 111412.84*Math.cos(rlat) - 93.5*Math.cos(3*rlat) + 0.118*Math.cos(5*rlat);\n  return [xScale, yScale];\n}\n\n/**\n * A message which requests the transmission of the datagram from the Unet\n *\n * @typedef {Message} DatagramReq\n * @property {number[]} data - data as an Array of bytes\n * @property {number} from - from/source node address\n * @property {number} to - to/destination node address\n * @property {number} protocol - protocol number to be used to send this Datagram\n * @property {boolean} reliability - true if Datagram should be reliable, false if unreliable\n * @property {number} ttl - time-to-live for the datagram. Time-to-live is advisory, and an agent may choose it ignore it\n */\n\n/**\n * Notification of received datagram message received by the Unet node.\n *\n * @typedef {Message} DatagramNtf\n * @property {number[]} data - data as an Array of bytes\n * @property {number} from - from/source node address\n * @property {number} to - to/destination node address\n * @property {number} protocol - protocol number to be used to send this Datagram\n * @property {number} ttl - time-to-live for the datagram. Time-to-live is advisory, and an agent may choose it ignore it\n */\n\n/**\n * An identifier for an agent or a topic.\n * @external AgentID\n * @see {@link https://org-arl.github.io/fjage/jsdoc/|fjåge.js Documentation}\n */\n\n/**\n * Services supported by fjage agents.\n * @external Services\n * @see {@link https://org-arl.github.io/fjage/jsdoc/|fjåge.js Documentation}\n */\n\n/**\n *  An action represented by a message.\n * @external Performative\n * @see {@link https://org-arl.github.io/fjage/jsdoc/|fjåge.js Documentation}\n */\n\n/**\n * Function to creates a unqualified message class based on a fully qualified name.\n * @external MessageClass\n * @see {@link https://org-arl.github.io/fjage/jsdoc/|fjåge.js Documentation}\n */\n\n/**\n * @external Gateway\n * @see {@link https://org-arl.github.io/fjage/jsdoc/|fjåge.js Documentation}\n */\n\nexport {AgentID, Services, UnetMessages, Protocol};\n","import {Gateway, Performative} from 'fjage';\nimport {Services, UnetMessages, Protocol} from './unetutils';\n\nconst REQUEST_TIMEOUT = 1000;\n\nconst AddressResolutionReq = UnetMessages.AddressResolutionReq;\nconst DatagramReq = UnetMessages.DatagramReq;\nconst DatagramNtf = UnetMessages.DatagramNtf;\nconst RxFrameNtf = UnetMessages.RxFrameNtf;\n\n/**\n * Creates a new UnetSocket to connect to a running Unet instance. This constructor returns a\n * {@link Promise} instead of the constructed UnetSocket object. Use `await` or `.then()` to get\n * a reference to the UnetSocket object. Based on if this is run in a Browser or Node.js,\n * it will internally connect over WebSockets or TCP respectively.\n *\n *\n * @class UnetSocket\n * @param {string} [hostname] - hostname/ip address of the master container to connect to\n * @param {number} [port] - port number of the master container to connect to\n * @param {string} [path='']  - path of the master container to connect to (for WebSockets)\n * @returns {Promise<UnetSocket>} - Promise which resolves to the UnetSocket object being constructed\n *\n * @example\n * let socket = await new UnetSocket('localhost', 8081, '/ws/');\n */\nexport default class UnetSocket {\n\n  constructor(hostname, port, path='') {\n    return (async () => {\n      this.gw = new Gateway({\n        hostname : hostname,\n        port : port,\n        path : path\n      });\n      this.localProtocol = -1;\n      this.remoteAddress = -1;\n      this.remoteProtocol = Protocol.DATA;\n      this.timeout = 0;\n      this.provider = null;\n      const alist = await this.gw.agentsForService(Services.DATAGRAM);\n      alist.forEach(a => {this.gw.subscribe(this.gw.topic(a));});\n      return this;\n    })();\n  }\n\n  /**\n   * Closes the socket. The socket functionality may not longer be accessed after this method is called.\n   * @returns {void}\n   */\n  close() {\n    this.gw.close();\n    this.gw = null;\n  }\n\n  /**\n   * Checks if a socket is closed.\n   * @returns {boolean} - true if closed, false if open\n   */\n  isClosed() {\n    return this.gw == null;\n  }\n\n  /**\n   * Binds a socket to listen to a specific protocol datagrams.\n   * Protocol numbers between Protocol.DATA+1 to Protocol.USER-1 are reserved protocols\n   * and cannot be bound. Unbound sockets listen to all unreserved\n   * @param {Protocol} protocol - protocol number to listen for\n   * @returns {boolean} - true on success, false on failure\n   */\n  bind(protocol) {\n    if (protocol == Protocol.DATA || (protocol >= Protocol.USER && protocol <= Protocol.MAX)) {\n      this.localProtocol = protocol;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Unbinds a socket so that it listens to all unreserved protocols.\n   * Protocol numbers between Protocol.DATA+1 to Protocol.USER-1 are considered reserved.\n   * @returns {void}\n   */\n  unbind() { this.localProtocol = -1;}\n\n  /**\n   * Checks if a socket is bound.\n   * @returns {boolean} - true if bound to a protocol, false if unbound\n   */\n  isBound() { return this.localProtocol >= 0;}\n\n  /**\n   * Sets the default destination address and destination protocol number for datagrams sent\n   * using this socket. The defaults can be overridden for specific send() calls.\n   * The default protcol number when a socket is opened is Protcol.DATA.\n   * The default node address is undefined.\n   * Protocol numbers between Protocol.DATA+1 to Protocol.USER-1 are considered reserved,\n   * and cannot be used for sending datagrams using the socket.\n   *\n   * @param {number} to - default destination node address\n   * @param {Protocol} protocol - default protocol number\n   * @returns {boolean} - true on success, false on failure\n   */\n  connect(to, protocol) {\n    if (to >= 0 && (protocol == Protocol.DATA || (protocol >= Protocol.USER && protocol <= Protocol.MAX))) {\n      this.remoteAddress = to;\n      this.remoteProtocol = protocol;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Resets the default destination address to undefined, and the default protocol number\n   * to Protocol.DATA.\n   * @returns {void}\n   */\n  disconnect() {\n    this.remoteAddress = -1;\n    this.remoteProtocol = 0;\n  }\n\n  /**\n   * Checks if a socket is connected, i.e., has a default destination address and protocol number.\n   * @returns {boolean} - true if connected, false otherwise\n   */\n  isConnected() { return this.remoteAddress >= 0; }\n\n  /**\n   * Gets the local node address of the Unet node connected to.\n   * @returns {Promise<int>} - local node address, or -1 on error\n   */\n  async getLocalAddress() {\n    if (this.gw == null) return -1;\n    const nodeinfo = await this.gw.agentForService(Services.NODE_INFO);\n    if (nodeinfo == null) return -1;\n    const addr = await nodeinfo.get('address');\n    return addr != null ? addr : -1;\n  }\n\n  /**\n   * Gets the protocol number that the socket is bound to.\n   * @returns {number}} - protocol number if socket is bound, -1 otherwise\n   */\n  getLocalProtocol() { return this.localProtocol; }\n\n  /**\n   * Gets the default destination node address for a connected socket.\n   * @returns {number}} - default destination node address if connected, -1 otherwise\n   */\n  getRemoteAddress() { return this.remoteAddress; }\n\n  /**\n   * Gets the default transmission protocol number.\n   * @returns {number}} - default protocol number used to transmit a datagram\n   */\n  getRemoteProtocol() { return this.remoteProtocol; }\n\n  /**\n   * Sets the timeout for datagram reception. A timeout of 0 means the\n   * {@link UnetSocket#receive|receive method} will check any appropriate\n   * Datagram has already been received (and is cached) else return immediately.\n   *\n   * @param {number} ms - timeout in milliseconds\n   * @returns {void}\n   */\n  setTimeout(ms) {\n    if (ms < 0) ms = 0;\n    this.timeout = ms;\n  }\n\n  /**\n   * Gets the timeout for datagram reception.\n   * @returns {number} - timeout in milliseconds\n   */\n  getTimeout() { return this.timeout; }\n\n  /**\n   * Transmits a datagram to the specified node address using the specified protocol.\n   * Protocol numbers between Protocol.DATA+1 to Protocol.USER-1 are considered reserved,\n   * and cannot be used for sending datagrams using the socket.\n   * @param {number[]|DatagramReq} data - data to be sent over the socket as an Array of bytes or DatagramReq\n   * @param {number} to - destination node address\n   * @param {number} protocol - protocol number\n   * @returns {Promise<boolean>} - true if the Unet node agreed to send out the Datagram, false otherwise\n   */\n  async send(data, to=this.remoteAddress, protocol=this.remoteProtocol) {\n    if (to < 0 || this.gw == null) return false;\n    var req;\n    if (Array.isArray(data)){\n      req = new DatagramReq();\n      req.data = data;\n      req.to = to;\n      req.protocol = protocol;\n    } else if (data instanceof DatagramReq){\n      req = data;\n    } else {\n      return false;\n    }\n    let p = req.protocol;\n    if (p != Protocol.DATA && (p < Protocol.USER || p > Protocol.MAX)) return false;\n    if (req.recipient == null) {\n      if (this.provider == null) this.provider = await this.gw.agentForService(Services.TRANSPORT);\n      if (this.provider == null) this.provider = await this.gw.agentForService(Services.ROUTING);\n      if (this.provider == null) this.provider = await this.gw.agentForService(Services.LINK);\n      if (this.provider == null) this.provider = await this.gw.agentForService(Services.PHYSICAL);\n      if (this.provider == null) this.provider = await this.gw.agentForService(Services.DATAGRAM);\n      if (this.provider == null) return false;\n      req.recipient = this.provider;\n    }\n    const rsp = await this.gw.request(req, REQUEST_TIMEOUT);\n    return (rsp != null && rsp.perf == Performative.AGREE);\n  }\n\n  /**\n   * Receives a datagram sent to the local node and the bound protocol number. If the socket is unbound,\n   * then datagrams with all unreserved protocols are received. Any broadcast datagrams are also received.\n   *\n   * @returns {Promise<?DatagramNtf>} - datagram received by the socket\n   */\n  async receive() {\n    if (this.gw == null) return null;\n    return await this.gw.receive(msg => {\n      if (msg.__clazz__ != DatagramNtf.__clazz__ && msg.__clazz__ != RxFrameNtf.__clazz__ ) return false;\n      let p = msg.protocol;\n      if (p == Protocol.DATA || p >= Protocol.USER) {\n        return this.localProtocol < 0 || this.localProtocol == p;\n      }\n      return false;\n    }, this.timeout);\n  }\n\n  /**\n   * Gets a Gateway to provide low-level access to UnetStack.\n   * @returns {Gateway} - underlying fjage Gateway supporting this socket\n   */\n  getGateway() { return this.gw; }\n\n  /**\n   * Gets an AgentID providing a specified service for low-level access to UnetStack\n   * @param {string} svc - the named service of interest\n   * @returns {Promise<?AgentID>} - a promise which returns an {@link AgentID} that provides the service when resolved\n   */\n  async agentForService(svc) {\n    if (this.gw == null) return null;\n    return await this.gw.agentForService(svc);\n  }\n\n  /**\n   *\n   * @param {string} svc - the named service of interest\n   * @returns {Promise<AgentID[]>} - a promise which returns an array of {@link AgentID|AgentIDs} that provides the service when resolved\n   */\n  async agentsForService(svc) {\n    if (this.gw == null) return null;\n    return await this.gw.agentsForService(svc);\n  }\n\n  /**\n   * Gets a named AgentID for low-level access to UnetStack.\n   * @param {string} name - name of agent\n   * @returns {AgentID} - AgentID for the given name\n   */\n  agent(name) {\n    if (this.gw == null) return null;\n    return this.gw.agent(name);\n  }\n\n  /**\n   * Resolve node name to node address.\n   * @param {string} nodeName - name of the node to resolve\n   * @returns {Promise<?number>} - address of the node, or null if unable to resolve\n   */\n  async host(nodeName) {\n    const arp = await this.agentForService(Services.ADDRESS_RESOLUTION);\n    if (arp == null) return null;\n    const req = new AddressResolutionReq(nodeName);\n    req.name = nodeName;\n    req.recipient = arp;\n    const rsp = await this.gw.request(req, REQUEST_TIMEOUT);\n    if (rsp == null || ! Object.prototype.hasOwnProperty.call(rsp, 'address')) return null;\n    return rsp.address;\n  }\n}"],"names":["isBrowser","window","document","isWebWorker","self","constructor","name","isNode","process","versions","node","SOCKET_OPEN","SOCKET_OPENING","createConnection","TCPconnector","opts","this","url","URL","host","hostname","port","_buf","pendingOnOpen","connListeners","_sockInit","_sendConnEvent","val","forEach","l","toString","call","_sockSetup","import","then","module","error","debug","console","log","sock","setEncoding","on","_onSockOpen","bind","_sockReconnect","send","data","write","_firstConn","keepAlive","readyState","_firstReConn","remoteAddress","remotePort","setTimeout","_reconnectTime","_processSockData","cb","length","s","lines","split","idx","_onSockRx","push","setReadCallback","addConnectionListener","listener","removeConnectionListener","ndx","indexOf","splice","close","onclose","destroy","WSConnector","pathname","reconnectTime","_keepAlive","_websockSetup","WebSocket","onerror","_websockReconnect","onopen","_onWebsockOpen","CONNECTING","OPEN","onmessage","event","_onWebsockRx","Performative","REQUEST","AGREE","REFUSE","FAILURE","INFORM","CONFIRM","DISCONFIRM","QUERY_IF","NOT_UNDERSTOOD","CFP","PROPOSE","CANCEL","AgentID","topic","owner","getName","isTopic","msg","recipient","toJSON","async","timeout","request","connector","params","values","index","ParameterReq","Array","isArray","requests","map","p","i","param","value","Number","isInteger","rsp","ret","fill","perf","rvals","Object","keys","f","find","rv","endsWith","Message","inReplyTo","msgID","sender","__clazz__","_guid","suffix","clazz","replace","k","startsWith","_serialize","JSON","stringify","v","_inflate","key","static","obj","String","parse","e","qclazz","MessageClass","Gateway","gObj","location","warn","assign","GATEWAY_DEFAULTS","DEFAULT_URL","existing","_getGWCache","_timeout","_queueSize","queueSize","pending","subscriptions","eventListeners","queue","aid","_createConnector","_addGWCache","_sendEvent","type","_onMsgRx","_decodeBase64","id","action","_deserialize","message","consumed","shift","inResponseTo","agentIDs","answer","agentID","services","undefined","_msgTx","_msgTxRx","rq","Promise","resolve","timer","clearTimeout","conn","protocol","state","flush","_update_watch","_matchMessage","filter","prototype","hasOwnProperty","__proto__","_getMessageFromQueue","matchedMsg","fjage","gateways","g","gw","_removeGWCache","addEventListener","removeEventListener","addMessageListener","removeMessageListener","addConnListener","removeConnListener","getAgentID","agent","topic2","subscribe","unsubscribe","service","aids","relay","receive","lid","Services","SHELL","parent","sname","cls","super","len","s4","Math","floor","random","substring","d","x","base64","dtype","littleEndian","atob","bytes","Uint8Array","charCodeAt","view","DataView","buffer","getUint8","getInt16","getInt32","getInt64","getFloat32","getFloat64","_b64toArray","navigator","userAgent","includes","global","a","Buffer","from","DatagramReq","DatagramNtf","BasebandSignal","NODE_INFO","ADDRESS_RESOLUTION","DATAGRAM","PHYSICAL","RANGING","BASEBAND","LINK","MAC","ROUTING","ROUTE_MAINTENANCE","TRANSPORT","REMOTE","STATE_MANAGER","DEVICE_INFO","DOA","Protocol","DATA","LINK2","USER","MAX","UnetMessages","TestReportNtf","AbnormalTerminationNtf","CapabilityListRsp","CapabilityReq","ClearReq","DatagramCancelReq","DatagramDeliveryNtf","DatagramFailureNtf","DatagramProgressNtf","ParamChangeNtf","RefuseRsp","FailureNtf","DatagramTraceReq","RouteDiscoveryReq","RouteTraceReq","RouteDiscoveryNtf","RouteTraceNtf","FecDecodeReq","RxJanusFrameNtf","TxJanusFrameReq","BadFrameNtf","BadRangeNtf","ClearSyncReq","CollisionNtf","RxFrameNtf","RxFrameStartNtf","SyncInfoReq","SyncInfoRsp","TxFrameNtf","TxFrameReq","TxFrameStartNtf","TxRawFrameReq","AddressAllocReq","AddressAllocRsp","AddressResolutionReq","AddressResolutionRsp","RecordBasebandSignalReq","RxBasebandSignalNtf","TxBasebandSignalReq","LinkStatusNtf","RangeNtf","RangeReq","BeaconReq","RespondReq","InterrogationNtf","ReservationAcceptReq","ReservationCancelReq","ReservationReq","ReservationRsp","ReservationStatusNtf","RxAckNtf","TxAckReq","RemoteExecReq","RemoteFailureNtf","RemoteFileGetReq","RemoteFileNtf","RemoteFilePutReq","RemoteSuccessNtf","RemoteTextNtf","RemoteTextReq","AddScheduledSleepReq","GetSleepScheduleReq","RemoveScheduledSleepReq","SleepScheduleRsp","WakeFromSleepNtf","ClearStateReq","SaveStateReq","_initConv","lat","rlat","PI","yScale","cos","path","localProtocol","remoteProtocol","provider","agentsForService","isClosed","unbind","isBound","connect","to","disconnect","isConnected","nodeinfo","agentForService","addr","get","getLocalProtocol","getRemoteAddress","getRemoteProtocol","ms","getTimeout","req","getGateway","svc","nodeName","arp","address","origin","y","coords","xScale","lng","pos"],"mappings":"4OAIA,MAAMA,EAA8B,oBAAXC,aAAqD,IAApBA,OAAOC,SAG3DC,EAA8B,iBAATC,MACtBA,KAAKC,aACqB,+BAA1BD,KAAKC,YAAYC,KAGhBC,EAA4B,oBAAZC,SACG,MAApBA,QAAQC,UACiB,MAAzBD,QAAQC,SAASC,KAWhBC,EAAc,OACdC,EAAiB,UAEvB,IAAIC,EAMJ,MAAMC,EAQJT,YAAYU,EAAO,IACjBC,KAAKC,IAAM,IAAIC,IAAI,mBACnB,IAAIC,EAAOJ,EAAKK,UAAY,YACxBC,EAAON,EAAKM,OAAS,EACzBL,KAAKC,IAAIG,SAAWL,EAAKK,SACzBJ,KAAKC,IAAII,KAAON,EAAKM,KACrBL,KAAKM,KAAO,GACZN,KAAKO,cAAgB,GACrBP,KAAKQ,cAAgB,GACrBR,KAAKS,UAAUN,EAAME,GAIvBK,eAAeC,GACbX,KAAKQ,cAAcI,SAAQC,IACzBA,GAA6B,sBAAxB,GAAGC,SAASC,KAAKF,IAA8BA,EAAEF,MAI1DF,UAAUN,EAAME,GACd,GAAKR,EAUHG,KAAKgB,WAAWb,EAAME,QATtB,IACEY,OAAO,OAAOC,MAAKC,IACjBtB,EAAmBsB,EAAOtB,iBAC1BG,KAAKgB,WAAWb,EAAME,MAEzB,MAAMe,GACFpB,KAAKqB,OAAOC,QAAQC,IAAI,gCAOjCP,WAAWb,EAAME,GACf,GAAIR,EACJ,IACEG,KAAKwB,KAAO3B,EAAiB,CAAEM,KAAQA,EAAME,KAAQA,IACrDL,KAAKwB,KAAKC,YAAY,QACtBzB,KAAKwB,KAAKE,GAAG,UAAW1B,KAAK2B,YAAYC,KAAK5B,OAC9CA,KAAKwB,KAAKE,GAAG,QAAS1B,KAAK6B,eAAeD,KAAK5B,OAC/CA,KAAKwB,KAAKE,GAAG,SAAS,KAAO1B,KAAKU,gBAAe,MACjDV,KAAKwB,KAAKM,KAAOC,IAAS/B,KAAKwB,KAAKQ,MAAMD,IAC1C,MAAOX,GAEP,YADGpB,KAAKqB,OAAOC,QAAQC,IAAI,wBAAyBvB,KAAKwB,KAAKrB,KAAO,IAAMH,KAAKwB,KAAKnB,QAKzFwB,kBACM7B,KAAKiC,YAAejC,KAAKkC,WAAalC,KAAKwB,KAAKW,YAAcvC,GAAkBI,KAAKwB,KAAKW,YAAcxC,IACxGK,KAAKoC,cAAcpC,KAAKU,gBAAe,GAC3CV,KAAKoC,cAAe,EACjBpC,KAAKqB,OAAOC,QAAQC,IAAI,mBAAoBvB,KAAKwB,KAAKa,cAAgB,IAAMrC,KAAKwB,KAAKc,YACzFC,YAAW,KACTvC,KAAKO,cAAgB,GACrBP,KAAKgB,WAAWhB,KAAKwB,KAAKvB,OACzBD,KAAKwC,iBAGVb,cACE3B,KAAKU,gBAAe,GACpBV,KAAKwB,KAAKE,GAAG,QAAS1B,KAAK6B,eAAeD,KAAK5B,OAC/CA,KAAKwB,KAAKE,GAAG,OAAQ1B,KAAKyC,iBAAiBb,KAAK5B,OAChDA,KAAKO,cAAcK,SAAQ8B,GAAMA,MACjC1C,KAAKO,cAAcoC,OAAS,EAC5B3C,KAAKM,KAAO,GAGdmC,iBAAiBG,GACf5C,KAAKM,MAAQsC,EACb,IAAIC,EAAQ7C,KAAKM,KAAKwC,MAAM,MAC5BD,EAAMjC,SAAQ,CAACC,EAAGkC,KACZA,EAAMF,EAAMF,OAAO,EACjB9B,GAAKb,KAAKgD,WAAWhD,KAAKgD,UAAUjC,KAAKf,KAAKa,GAElDb,KAAKM,KAAOO,KAKlBC,WACE,IAAI8B,EAAI,GAER,OADAA,IAAwB5C,KAAKwB,KAAOxB,KAAKwB,KAAKa,cAAcvB,WAAa,IAAMd,KAAKwB,KAAKc,WAAWxB,YAC7F8B,EAQTZ,MAAMY,GACJ,OAAK5C,KAAKwB,MAAQxB,KAAKwB,KAAKW,YAAcvC,EAK/BI,KAAKwB,KAAKW,YAAcxC,IACjCK,KAAKwB,KAAKM,KAAKc,EAAE,OACV,IANP5C,KAAKO,cAAc0C,MAAK,KACtBjD,KAAKwB,KAAKM,KAAKc,EAAE,UAEZ,GAYXM,gBAAgBR,GACVA,GAA+B,sBAAzB,GAAG5B,SAASC,KAAK2B,KAA6B1C,KAAKgD,UAAYN,GAa3ES,sBAAsBC,GACpBpD,KAAKQ,cAAcyC,KAAKG,GAQ1BC,yBAAyBD,GACvB,IAAIE,EAAMtD,KAAKQ,cAAc+C,QAAQH,GACrC,OAAIE,GAAO,IACTtD,KAAKQ,cAAcgD,OAAOF,EAAK,IACxB,GAQXG,QACOzD,KAAKwB,OACNxB,KAAKwB,KAAKW,YAAcvC,EAC1BI,KAAKO,cAAc0C,MAAK,KACtBjD,KAAKwB,KAAKM,KAAK,sBACf9B,KAAKwB,KAAKkC,QAAU,KACpB1D,KAAKwB,KAAKmC,aAEH3D,KAAKwB,KAAKW,YAAcxC,IACjCK,KAAKwB,KAAKM,KAAK,sBACf9B,KAAKwB,KAAKkC,QAAU,KACpB1D,KAAKwB,KAAKmC,aAWhB,MAAMC,EAWJvE,YAAYU,EAAO,IACjBC,KAAKC,IAAM,IAAIC,IAAI,kBACnBF,KAAKC,IAAIG,SAAWL,EAAKK,SACzBJ,KAAKC,IAAII,KAAON,EAAKM,KACrBL,KAAKC,IAAI4D,SAAW9D,EAAK8D,SACzB7D,KAAKwC,eAAiBzC,EAAK+D,eAtBA,IAuB3B9D,KAAK+D,WAAahE,EAAKmC,UACvBlC,KAAKqB,MAAQtB,EAAKsB,QAAS,EAC3BrB,KAAKiC,YAAa,EAClBjC,KAAKoC,cAAe,EACpBpC,KAAKO,cAAgB,GACrBP,KAAKQ,cAAgB,GACrBR,KAAKgE,cAAchE,KAAKC,KAG1BS,eAAeC,GACbX,KAAKQ,cAAcI,SAAQC,IACzBA,GAA6B,sBAAxB,GAAGC,SAASC,KAAKF,IAA8BA,EAAEF,MAI1DqD,cAAc/D,GACZ,IACED,KAAKwB,KAAO,IAAIyC,UAAUhE,GAC1BD,KAAKwB,KAAK0C,QAAUlE,KAAKmE,kBAAkBvC,KAAK5B,MAChDA,KAAKwB,KAAK4C,OAASpE,KAAKqE,eAAezC,KAAK5B,MAC5CA,KAAKwB,KAAKkC,QAAU,KAAO1D,KAAKU,gBAAe,IAC/C,MAAOU,GAEP,YADGpB,KAAKqB,OAAOC,QAAQC,IAAI,wBAAyBtB,KAKxDkE,qBACMnE,KAAKiC,YAAejC,KAAK+D,YAAc/D,KAAKwB,KAAKW,YAAcnC,KAAKwB,KAAK8C,YAActE,KAAKwB,KAAKW,YAAcnC,KAAKwB,KAAK+C,OACzHvE,KAAKoC,cAAcpC,KAAKU,gBAAe,GAC3CV,KAAKoC,cAAe,EACjBpC,KAAKqB,OAAOC,QAAQC,IAAI,mBAAoBvB,KAAKwB,KAAKvB,KACzDsC,YAAW,KACTvC,KAAKO,cAAgB,GACrBP,KAAKgE,cAAchE,KAAKwB,KAAKvB,OAC5BD,KAAKwC,iBAGV6B,iBACKrE,KAAKqB,OAAOC,QAAQC,IAAI,gBAAiBvB,KAAKwB,KAAKvB,KACtDD,KAAKU,gBAAe,GACpBV,KAAKwB,KAAKkC,QAAU1D,KAAKmE,kBAAkBvC,KAAK5B,MAChDA,KAAKwB,KAAKgD,UAAYC,IAAezE,KAAK0E,cAAc1E,KAAK0E,aAAa3D,KAAKf,KAAKyE,EAAM1C,OAC1F/B,KAAKiC,YAAa,EAClBjC,KAAKoC,cAAe,EACpBpC,KAAKO,cAAcK,SAAQ8B,GAAMA,MACjC1C,KAAKO,cAAcoC,OAAS,EAG9B7B,WACE,IAAI8B,EAAI,GAER,OADAA,IAAuB5C,KAAKwB,KAAOxB,KAAKwB,KAAKvB,IAAIa,YAC1C8B,EAOTZ,MAAMY,GACJ,OAAK5C,KAAKwB,MAAQxB,KAAKwB,KAAKW,YAAcnC,KAAKwB,KAAK8C,WAKzCtE,KAAKwB,KAAKW,YAAcnC,KAAKwB,KAAK+C,OAC3CvE,KAAKwB,KAAKM,KAAKc,EAAE,OACV,IANP5C,KAAKO,cAAc0C,MAAK,KACtBjD,KAAKwB,KAAKM,KAAKc,EAAE,UAEZ,GAaXM,gBAAgBR,GACVA,GAA+B,sBAAzB,GAAG5B,SAASC,KAAK2B,KAA6B1C,KAAK0E,aAAehC,GAa9ES,sBAAsBC,GACpBpD,KAAKQ,cAAcyC,KAAKG,GAQ1BC,yBAAyBD,GACvB,IAAIE,EAAMtD,KAAKQ,cAAc+C,QAAQH,GACrC,OAAIE,GAAO,IACTtD,KAAKQ,cAAcgD,OAAOF,EAAK,IACxB,GAQXG,QACOzD,KAAKwB,OACNxB,KAAKwB,KAAKW,YAAcnC,KAAKwB,KAAK8C,WACpCtE,KAAKO,cAAc0C,MAAK,KACtBjD,KAAKwB,KAAKM,KAAK,sBACf9B,KAAKwB,KAAKkC,QAAU,KACpB1D,KAAKwB,KAAKiC,WAEHzD,KAAKwB,KAAKW,YAAcnC,KAAKwB,KAAK+C,OAC3CvE,KAAKwB,KAAKM,KAAK,sBACf9B,KAAKwB,KAAKkC,QAAU,KACpB1D,KAAKwB,KAAKiC,WAOhB,MAOMkB,EAAe,CACnBC,QAAS,UACTC,MAAO,QACPC,OAAQ,SACRC,QAAS,UACTC,OAAQ,SACRC,QAAS,UACTC,WAAY,aACZC,SAAU,WACVC,eAAgB,iBAChBC,IAAK,MACLC,QAAS,UACTC,OAAQ,UAUV,MAAMC,EAGJnG,YAAYC,EAAMmG,EAAOC,GACvB1F,KAAKV,KAAOA,EACZU,KAAKyF,MAAQA,EACbzF,KAAK0F,MAAQA,EAQfC,UACE,OAAO3F,KAAKV,KAQdsG,UACE,OAAO5F,KAAKyF,MASd3D,KAAK+D,GACHA,EAAIC,UAAY9F,KAAK+F,SACrB/F,KAAK0F,MAAM5D,KAAK+D,GAUlBG,cAAcH,EAAKI,EAAQ,KAEzB,OADAJ,EAAIC,UAAY9F,KAAK+F,SACd/F,KAAK0F,MAAMQ,QAAQL,EAAKI,GAQjCnF,WACE,OAAOd,KAAK+F,UAAa/F,KAAK0F,OAAS1F,KAAK0F,MAAMS,UAAa,OAAOnG,KAAK0F,MAAMS,UAAUlG,MAAQ,IAQrG8F,SACE,OAAQ/F,KAAKyF,MAAQ,IAAM,IAAMzF,KAAKV,KAYxC0G,UAAWI,EAAQC,EAAQC,GAAM,EAAIL,EAAQ,KAC3C,IAAKG,EAAQ,OAAO,KACpB,IAAIP,EAAM,IAAIU,EACdV,EAAIC,UAAY9F,KAAKV,KACjBkH,MAAMC,QAAQL,GAChBP,EAAIa,SAAWN,EAAOO,KAAI,CAACC,EAAGC,KACrB,CACLC,MAASF,EACTG,MAASV,EAAOQ,QAIpBhB,EAAIiB,MAAQV,EACZP,EAAIkB,MAAQV,GAEdR,EAAIS,MAAQU,OAAOC,UAAUX,GAASA,GAAS,EAC/C,MAAMY,QAAYlH,KAAK0F,MAAMQ,QAAQL,EAAKI,GAC1C,IAAIkB,EAAMX,MAAMC,QAAQL,GAAU,IAAII,MAAMJ,EAAOzD,QAAQyE,KAAK,MAAQ,KACxE,IAAKF,GAAOA,EAAIG,MAAQ1C,EAAaK,SAAWkC,EAAIJ,MAAO,OAAOK,EAClE,GAAIX,MAAMC,QAAQL,GAAS,CACpBc,EAAIb,SAAQa,EAAIb,OAAS,IAC1Ba,EAAIJ,QAAOI,EAAIb,OAAOa,EAAIJ,OAASI,EAAIH,OAC3C,MAAMO,EAAQC,OAAOC,KAAKN,EAAIb,QAC9B,OAAOD,EAAOO,KAAKC,IACjB,IAAIa,EAAIH,EAAMI,MAAKC,GAAMA,EAAGC,SAAShB,KACrC,OAAOa,EAAIP,EAAIb,OAAOoB,GAAK,QAG7B,OAAOP,EAAIH,MAaff,UAAUI,EAAQE,GAAM,EAAIL,EAAQ,KAClC,IAAIJ,EAAM,IAAIU,EACdV,EAAIC,UAAY9F,KAAKV,KACjB8G,IACEI,MAAMC,QAAQL,GAASP,EAAIa,SAAWN,EAAOO,KAAIC,IAAa,CAACE,MAASF,MACvEf,EAAIiB,MAAQV,GAEnBP,EAAIS,MAAQU,OAAOC,UAAUX,GAASA,GAAS,EAC/C,MAAMY,QAAYlH,KAAK0F,MAAMQ,QAAQL,EAAKI,GAC1C,IAAIkB,EAAMX,MAAMC,QAAQL,GAAU,IAAII,MAAMJ,EAAOzD,QAAQyE,KAAK,MAAQ,KACxE,IAAKF,GAAOA,EAAIG,MAAQ1C,EAAaK,QAAWoB,IAAYc,EAAIJ,MAAS,OAAOK,EAEhF,GAAKf,EAIE,CAAA,GAAII,MAAMC,QAAQL,GAAS,CAC3Bc,EAAIb,SAAQa,EAAIb,OAAS,IAC1Ba,EAAIJ,QAAOI,EAAIb,OAAOa,EAAIJ,OAASI,EAAIH,OAC3C,MAAMO,EAAQC,OAAOC,KAAKN,EAAIb,QAC9B,OAAOD,EAAOO,KAAIC,IAChB,IAAIa,EAAIH,EAAMI,MAAKC,GAAMA,EAAGC,SAAShB,KACrC,OAAOa,EAAIP,EAAIb,OAAOoB,GAAK,QAG7B,OAAOP,EAAIH,MAVX,OAFKG,EAAIb,SAAQa,EAAIb,OAAS,IAC1Ba,EAAIJ,QAAOI,EAAIb,OAAOa,EAAIJ,OAASI,EAAIH,OACpCG,EAAIb,QAqBjB,MAAMwB,EAEJxI,YAAYyI,EAAU,CAACC,MAAM,KAAMC,OAAO,MAAOX,EAAK,IACpDrH,KAAKiI,UAAY,wBACjBjI,KAAK+H,MAAQG,EAAM,GACnBlI,KAAKgI,OAAS,KACdhI,KAAK8F,UAAYgC,EAAUE,OAC3BhI,KAAKqH,KAAOA,EACZrH,KAAK8H,UAAYA,EAAUC,OAAS,KAQtCjH,WACE,IAAI8B,EAAI,GACJuF,EAAS,GACb,IAAKnI,KAAKiI,UAAW,MAAO,GAC5B,IAAIG,EAAQpI,KAAKiI,UACjBG,EAAQA,EAAMC,QAAQ,QAAS,IAC/B,IAAIhB,EAAOrH,KAAKqH,KAChB,IAAK,IAAIiB,KAAKtI,KACRsI,EAAEC,WAAW,OACR,UAALD,GACK,aAALA,GACK,SAALA,GACK,QAALA,GACK,aAALA,IACkB,iBAAXtI,KAAKsI,GAIhB1F,GAAK,IAAM0F,EAAI,IAAMtI,KAAKsI,GAHxBH,EAAS,QAMb,OADAvF,GAAKuF,EACEC,EAAM,IAAIf,EAAK,IAAIzE,EAAEyF,QAAQ,KAAM,IAAI,IAOhDG,aAME,MAAO,gBALKxI,KAAKiI,WAAa,yBAKF,cAJjBQ,KAAKC,UAAU1I,MAAM,CAACsI,EAAEK,KACjC,IAAIL,EAAEC,WAAW,MACjB,OAAOI,KAEsC,KAKjDC,SAAS7G,GACP,IAAK,IAAI8G,KAAO9G,EACd/B,KAAK6I,GAAO9G,EAAK8G,GAKrBC,oBAAoBC,GAClB,GAAkB,iBAAPA,GAAmBA,aAAeC,OAC3C,IACED,EAAMN,KAAKQ,MAAMF,GAClB,MAAMG,GACL,OAAO,KAGX,IAAIC,EAASJ,EAAIX,MACbA,EAAQe,EAAOd,QAAQ,QAAS,IAChCV,EAAKyB,EAAahB,GAAS,IAAIgB,EAAahB,GAAS,IAAIP,EAG7D,OAFAF,EAAGM,UAAYkB,EACfxB,EAAGiB,SAASG,EAAIhH,MACT4F,GAqCX,MAAM0B,EAEJhK,YAAYU,EAAO,GAAIM,EAAMwD,EAAS,OAAQoC,EAAQ,MAEhC,iBAATlG,GAAqBA,aAAgBiJ,UAC9CjJ,EAAO,CACLK,SAAYL,EACZM,KAASA,GAAQiJ,EAAKC,SAASlJ,KAC/BwD,SAAaA,EACboC,QAAYA,GAEd3E,QAAQkI,KAAK,0CAEfzJ,EAAOwH,OAAOkC,OAAO,GAAIC,EAAkB3J,GAC3C,IAAIE,EAAM0J,EACV1J,EAAIG,SAAWL,EAAKK,SACpBH,EAAII,KAAON,EAAKM,KAChBJ,EAAI4D,SAAW9D,EAAK8D,SACpB,IAAI+F,EAAW5J,KAAK6J,YAAY5J,GAChC,GAAI2J,EAAU,OAAOA,EACrB5J,KAAK8J,SAAW/J,EAAKkG,QACrBjG,KAAK+D,WAAahE,EAAKmC,UACvBlC,KAAK+J,WAAahK,EAAKiK,UACvBhK,KAAKiK,QAAU,GACfjK,KAAKkK,cAAgB,GACrBlK,KAAKoD,SAAW,GAChBpD,KAAKmK,eAAiB,GACtBnK,KAAKoK,MAAQ,GACbpK,KAAKqB,OAAQ,EACbrB,KAAKqK,IAAM,IAAI7E,EAAQxG,EAAY,SAAW,UAAUkJ,EAAM,IAC9DlI,KAAKmG,UAAYnG,KAAKsK,iBAAiBrK,GACvCD,KAAKuK,YAAYvK,MAInBwK,WAAWC,EAAM9J,GACX6F,MAAMC,QAAQzG,KAAKmK,eAAeM,KACpCzK,KAAKmK,eAAeM,GAAM7J,SAAQC,IAChCA,GAA6B,sBAAxB,GAAGC,SAASC,KAAKF,IAA8BA,EAAEF,MAM5D+J,SAAS3I,GACP,IAAIgH,EACA/I,KAAKqB,OAAOC,QAAQC,IAAI,KAAKQ,GACjC/B,KAAKwK,WAAW,KAAMzI,GACtB,IACEgH,EAAMN,KAAKQ,MAAMlH,EAAM4I,GACxB,MAAMzB,GACL,OAGF,GADAlJ,KAAKwK,WAAW,MAAOzB,GACnB,OAAQA,GAAOA,EAAI6B,MAAM5K,KAAKiK,QAEhCjK,KAAKiK,QAAQlB,EAAI6B,IAAI7B,UACd/I,KAAKiK,QAAQlB,EAAI6B,SACnB,GAAkB,QAAd7B,EAAI8B,OAAkB,CAE/B,IAAIhF,EAAMgC,EAAQiD,aAAa/B,EAAIgC,SACnC,IAAKlF,EAAK,OAEV,GADA7F,KAAKwK,WAAW,QAAS3E,GACpBA,EAAIC,WAAa9F,KAAKqK,IAAItE,UAAa/F,KAAKkK,cAAcrE,EAAIC,WAAY,CAC7E,IAAIkF,GAAW,EACf,GAAIxE,MAAMC,QAAQzG,KAAKmK,eAAwB,SAC7C,IAAK,IAAItD,EAAI,EAAGA,EAAI7G,KAAKmK,eAAwB,QAAExH,OAAQkE,IACzD,GAAI7G,KAAKmK,eAAwB,QAAEtD,GAAGhB,GAAM,CAC1CmF,GAAW,EACX,MAKN,IAAK,IAAInC,KAAO7I,KAAKoD,SAEnB,GAAIpD,KAAKoD,SAASyF,GAAKhD,GAAM,CAC3BmF,GAAW,EACX,MAGAA,IACEhL,KAAKoK,MAAMzH,QAAU3C,KAAK+J,YAAY/J,KAAKoK,MAAMa,QACrDjL,KAAKoK,MAAMnH,KAAK4C,SAGf,CAEL,IAAIqB,EAAM,CAAE0D,GAAI7B,EAAI6B,GAAIM,aAAcnC,EAAI8B,QAC1C,OAAQ9B,EAAI8B,QACZ,IAAK,SACH3D,EAAIiE,SAAW,CAACnL,KAAKqK,IAAI1E,WACzB,MACF,IAAK,gBACHuB,EAAIkE,OAAUrC,EAAIsC,SAAWrL,KAAKqK,IAAI1E,UACtC,MACF,IAAK,WACHuB,EAAIoE,SAAW,GACf,MACF,IAAK,kBACHpE,EAAImE,QAAU,GACd,MACF,IAAK,mBACHnE,EAAIiE,SAAW,GACf,MACF,QACEjE,OAAMqE,EAEJrE,GAAKlH,KAAKwL,OAAOtE,IAKzBsE,OAAO5I,GAIL,MAHgB,iBAALA,GAAmBA,aAAaoG,SAASpG,EAAI6F,KAAKC,UAAU9F,IACpE5C,KAAKqB,OAAOC,QAAQC,IAAI,KAAKqB,GAChC5C,KAAKwK,WAAW,KAAM5H,GACf5C,KAAKmG,UAAUnE,MAAMY,GAI9B6I,SAASC,GAEP,OADAA,EAAGd,GAAK1C,EAAM,GACP,IAAIyD,SAAQC,IACjB,IAAIC,EAAQtJ,YAAW,YACdvC,KAAKiK,QAAQyB,EAAGd,IACnB5K,KAAKqB,OAAOC,QAAQC,IAAI,qBAAuBmK,GACnDE,MACC,EAAE5L,KAAK8J,UACV9J,KAAKiK,QAAQyB,EAAGd,IAAM1D,IACpB4E,aAAaD,GACbD,EAAQ1E,IAELlH,KAAKwL,OAAOzK,KAAKf,KAAK0L,KACzBI,aAAaD,UACN7L,KAAKiK,QAAQyB,EAAGd,IACnB5K,KAAKqB,OAAOC,QAAQC,IAAI,sBAAwBmK,GACpDE,QAMNtB,iBAAiBrK,GACf,IAAI8L,EACJ,GAAI9L,EAAI+L,SAASzD,WAAW,MAC1BwD,EAAQ,IAAInI,EAAY,CACtBxD,SAAWH,EAAIG,SACfC,KAAOJ,EAAII,KACXwD,SAAW5D,EAAI4D,SACf3B,UAAalC,KAAK+D,iBAEhB,CAAA,IAAI9D,EAAI+L,SAASzD,WAAW,OAM3B,OAAO,KALZwD,EAAO,IAAIjM,EAAa,CACtBM,SAAWH,EAAIG,SACfC,KAAOJ,EAAII,KACX6B,UAAalC,KAAK+D,aAWtB,OARAgI,EAAK7I,gBAAgBlD,KAAK0K,SAAS9I,KAAK5B,OACxC+L,EAAK5I,uBAAsB8I,IACZ,GAATA,IACFjM,KAAKkM,QACLlM,KAAKmG,UAAUnE,MAAM,mBACrBhC,KAAKmM,oBAGFJ,EAITK,cAAcC,EAAQxG,GACpB,MAAqB,iBAAVwG,GAAsBA,aAAkBrD,OAC1C,cAAenD,GAAOA,EAAIiC,WAAauE,EACrC9E,OAAO+E,UAAUC,eAAexL,KAAKsL,EAAQ,SAC/C,cAAexG,GAAOA,EAAIiC,WAAauE,EAAOtE,MACnB,WAAzBsE,EAAOG,UAAUlN,KACnB+M,EAAOpE,WAAapC,EAAIoC,UACL,mBAAVoE,EACTA,EAAOxG,GAEPA,aAAewG,EAK1BI,qBAAqBJ,GACnB,IAAKrM,KAAKoK,MAAMzH,OAAQ,OACxB,IAAK0J,EAAQ,OAAOrM,KAAKoK,MAAMa,QAE/B,IAAIyB,EAAa1M,KAAKoK,MAAM1C,MAAM7B,GAAO7F,KAAKoM,cAAcC,EAAQxG,KAGpE,OAFI6G,GAAY1M,KAAKoK,MAAM5G,OAAOxD,KAAKoK,MAAM7G,QAAQmJ,GAAa,GAE3DA,EAIT7C,YAAY5J,GACV,IAAKqJ,EAAKqD,QAAUrD,EAAKqD,MAAMC,SAAU,OAAO,KAChD,IAAInF,EAAI6B,EAAKqD,MAAMC,SAASP,QAAOQ,GAAKA,EAAE1G,UAAUlG,IAAIa,YAAcb,EAAIa,aAC1E,OAAI2G,EAAE9E,OAAgB8E,EAAE,GACjB,KAIT8C,YAAYuC,GACLxD,EAAKqD,OAAUrD,EAAKqD,MAAMC,UAC/BtD,EAAKqD,MAAMC,SAAS3J,KAAK6J,GAI3BC,eAAeD,GACb,GAAKxD,EAAKqD,OAAUrD,EAAKqD,MAAMC,SAA/B,CACA,IAAItG,EAAQgD,EAAKqD,MAAMC,SAASrJ,QAAQuJ,GAC3B,MAATxG,GAAegD,EAAKqD,MAAMC,SAASpJ,OAAO8C,EAAM,IAItD6F,iBAiBAa,iBAAiBvC,EAAMrH,GAChBoD,MAAMC,QAAQzG,KAAKmK,eAAeM,MACrCzK,KAAKmK,eAAeM,GAAQ,IAE9BzK,KAAKmK,eAAeM,GAAMxH,KAAKG,GAUjC6J,oBAAoBxC,EAAMrH,GACxB,IAAKpD,KAAKmK,eAAeM,GAAO,OAChC,IAAInH,EAAMtD,KAAKmK,eAAeM,GAAMlH,QAAQH,GACxCE,GAAO,GAAGtD,KAAKmK,eAAeM,GAAMjH,OAAOF,EAAK,GAStD4J,mBAAmB9J,GACjBpD,KAAKgN,iBAAiB,UAAU5J,GASlC+J,sBAAsB/J,GACpBpD,KAAKiN,oBAAoB,UAAW7J,GAStCgK,gBAAgBhK,GACdpD,KAAKgN,iBAAiB,OAAQ5J,GAShCiK,mBAAmBjK,GACjBpD,KAAKiN,oBAAoB,OAAQ7J,GAQnCkK,aACE,OAAOtN,KAAKqK,IASdkD,MAAMjO,GACJ,OAAO,IAAIkG,EAAQlG,GAAM,EAAOU,MAUlCyF,MAAMA,EAAO+H,GACX,MAAoB,iBAAT/H,GAAqBA,aAAiBuD,OAAe,IAAIxD,EAAQC,GAAO,EAAMzF,MACrFyF,aAAiBD,EACfC,EAAMG,UAAkBH,EACrB,IAAID,EAAQC,EAAME,WAAW6H,EAAS,KAAOA,EAAS,IAAI,SAAS,EAAMxN,WAFlF,EAYFyN,UAAUhI,GACHA,EAAMG,YAAWH,EAAQ,IAAID,EAAQC,EAAME,UAAY,SAAS,EAAM3F,OAC3EA,KAAKkK,cAAczE,EAAMM,WAAY,EACrC/F,KAAKmM,gBASPuB,YAAYjI,GACLA,EAAMG,YAAWH,EAAQ,IAAID,EAAQC,EAAME,UAAY,SAAS,EAAM3F,cACpEA,KAAKkK,cAAczE,EAAMM,UAChC/F,KAAKmM,gBAUPnG,sBAAsB2H,GACpB,IAAIjC,EAAK,CAAEb,OAAQ,kBAAmB8C,QAASA,GAC3CzG,QAAYlH,KAAKyL,SAASC,GAC9B,GAAKxE,GAAQA,EAAImE,QACjB,OAAO,IAAI7F,EAAQ0B,EAAImE,SAAS,EAAOrL,MASzCgG,uBAAuB2H,GACrB,IAAIjC,EAAK,CAAEb,OAAQ,mBAAoB8C,QAASA,GAC5CzG,QAAYlH,KAAKyL,SAASC,GAC1BkC,EAAO,GACX,IAAK1G,IAAQV,MAAMC,QAAQS,EAAIiE,UAAW,OAAOyC,EACjD,IAAK,IAAI/G,EAAI,EAAGA,EAAIK,EAAIiE,SAASxI,OAAQkE,IACvC+G,EAAK3K,KAAK,IAAIuC,EAAQ0B,EAAIiE,SAAStE,IAAI,EAAO7G,OAChD,OAAO4N,EAUT9L,KAAK+D,GACHA,EAAImC,OAAShI,KAAKqK,IAAItE,SACN,IAAZF,EAAIwB,OACFxB,EAAIoC,UAAUL,SAAS,OAAQ/B,EAAIwB,KAAO1C,EAAaC,QACtDiB,EAAIwB,KAAO1C,EAAaK,QAE/BhF,KAAKwK,WAAW,QAAS3E,GACzB,IAAI6F,EAAKjD,KAAKC,UAAU,CAAEmC,OAAQ,OAAQgD,OAAO,EAAM9C,QAAS,cAEhE,OADAW,EAAKA,EAAGrD,QAAQ,cAAexC,EAAI2C,gBAC1BxI,KAAKwL,OAAOE,GAQvBQ,QACElM,KAAKoK,MAAMzH,OAAS,EAWtBqD,cAAcH,EAAKI,EAAQ,KAEzB,OADAjG,KAAK8B,KAAK+D,GACH7F,KAAK8N,QAAQjI,EAAKI,GAY3BD,cAAcqG,EAAQpG,EAAQ,GAC5B,OAAO,IAAI0F,SAAQC,IACjB,IAAI/F,EAAM7F,KAAKyM,qBAAqB1L,KAAKf,KAAKqM,GAC9C,GAAIxG,EAEF,YADA+F,EAAQ/F,GAGV,GAAe,GAAXI,EAGF,OAFIjG,KAAKqB,OAAOC,QAAQC,IAAI,qBAAuB8K,QACnDT,IAGF,IACIC,EADAkC,EAAM7F,EAAM,GAEZjC,EAAU,IACZ4F,EAAQtJ,YAAW,YACVvC,KAAKoD,SAAS2K,GACjB/N,KAAKqB,OAAOC,QAAQC,IAAI,qBAAuB8K,GACnDT,MACC3F,IAELjG,KAAKoD,SAAS2K,GAAOlI,KACd7F,KAAKoM,cAAcC,EAAQxG,KAC7BgG,GAAOC,aAAaD,UAChB7L,KAAKoD,SAAS2K,GACrBnC,EAAQ/F,IACD,MAUbpC,QACEzD,KAAKmG,UAAU1C,QACfzD,KAAK+M,eAAe/M,aAQlBgO,EAAW,CACfC,MAAQ,sCAYV,SAAS7E,EAAa9J,EAAM4O,EAAOrG,GACjC,IAAIsG,EAAQ7O,EAAK+I,QAAQ,QAAS,IAClC,GAAIe,EAAa+E,GAAQ,OAAO/E,EAAa+E,GAC7C,IAAIC,EAAM,cAAcF,EACtB7O,YAAY+G,GAGV,GAFAiI,QACArO,KAAKiI,UAAY3I,EACb8G,EAAO,CACT,MAAMoB,EAAOD,OAAOC,KAAKpB,GACzB,IAAK,IAAIkC,KAAKd,EACZxH,KAAKsI,GAAKlC,EAAOkC,MAOzB,OAFA8F,EAAInG,UAAY3I,EAChB8J,EAAa+E,GAASC,EACfA,EAOT,SAASlG,EAAMoG,GACb,SAASC,IACP,OAAOC,KAAKC,MAA4B,OAArB,EAAID,KAAKE,WAAqB5N,SAAS,IAAI6N,UAAU,GAE1E,IAAI/L,EAAI2L,IACR,IAAK,IAAI1H,EAAI,EAAGA,EAAIyH,EAAI,EAAGzH,IACzBjE,GAAK2L,IACP,OAAO3L,EA8CT,SAAS+H,EAAcrC,EAAGsG,GACxB,GAAU,OAANA,EACF,OAAO,KAET,GAAgB,iBAALA,GAAiB,UAAWA,EAAG,CACxC,IAAIxG,EAAQwG,EAAExG,MACd,GAAIA,EAAMG,WAAW,MAAwB,GAAhBH,EAAMzF,QAAe,SAAUiM,EAAG,CAC7D,IAAIC,EAhDV,SAAqBC,EAAQC,EAAOC,GAAa,GAC/C,IAAIpM,EAAI0G,EAAK2F,KAAKH,GACdR,EAAM1L,EAAED,OACRuM,EAAQ,IAAIC,WAAWb,GAC3B,IAAK,IAAIzH,EAAI,EAAGA,EAAIyH,EAAKzH,IACvBqI,EAAMrI,GAAKjE,EAAEwM,WAAWvI,GAC1B,IAAIc,EAAK,GACL0H,EAAO,IAAIC,SAASJ,EAAMK,QAC9B,OAAQR,GACR,IAAK,KACH,IAAKlI,EAAI,EAAGA,EAAIyH,EAAKzH,IACnBc,EAAG1E,KAAKoM,EAAKG,SAAS3I,IACxB,MACF,IAAK,KACH,IAAKA,EAAI,EAAGA,EAAIyH,EAAKzH,GAAG,EACtBc,EAAG1E,KAAKoM,EAAKI,SAAS5I,EAAGmI,IAC3B,MACF,IAAK,KACH,IAAKnI,EAAI,EAAGA,EAAIyH,EAAKzH,GAAG,EACtBc,EAAG1E,KAAKoM,EAAKK,SAAS7I,EAAGmI,IAC3B,MACF,IAAK,KACH,IAAKnI,EAAI,EAAGA,EAAIyH,EAAKzH,GAAG,EACtBc,EAAG1E,KAAKoM,EAAKM,SAAS9I,EAAGmI,IAC3B,MACF,IAAK,KACH,IAAKnI,EAAI,EAAGA,EAAIyH,EAAKzH,GAAG,EACtBc,EAAG1E,KAAKoM,EAAKO,WAAW/I,EAAGmI,IAC7B,MACF,IAAK,KACH,IAAKnI,EAAI,EAAGA,EAAIyH,EAAKzH,GAAG,EACtBc,EAAG1E,KAAKoM,EAAKQ,WAAWhJ,EAAGmI,IAC7B,MACF,QACE,OAEF,OAAOrH,EAYKmI,CAAYlB,EAAE7M,KAAM6M,EAAExG,OAC1ByG,IAAGD,EAAIC,IAGf,OAAOD,EAKT,MAAMlF,EAAmB,GACzB,IACIC,EADAL,EAAO,GAEPtK,GAAaG,GACfmK,EAAOrK,OACPsI,OAAOkC,OAAOC,EAAkB,CAC9BtJ,SAAYkJ,EAAKC,SAASnJ,SAC1BC,KAAQiJ,EAAKC,SAASlJ,KACtBwD,SAAa,OACboC,QAAW,IACX/D,WAAc,EACd8H,UA33BuB,MA63BzBL,EAAc,IAAIzJ,IAAI,uBAEI,IAAfoJ,EAAKqD,QAAuBrD,EAAKqD,MAAQ,SAClB,IAAvBrD,EAAKqD,MAAMC,WAAwBtD,EAAKqD,MAAMC,SAAW,MA9sCtD,KAAyB,oBAAX3N,QAA0C,WAAhBA,OAAOK,MAC1DyQ,UAAUC,UAAUC,SAAS,YAC7BF,UAAUC,UAAUC,SAAS,WA6sCZ1Q,KACpB+J,EAAO4G,OACP3I,OAAOkC,OAAOC,EAAkB,CAC9BtJ,SAAY,YACZC,KAAQ,OACRwD,SAAY,GACZoC,QAAW,IACX/D,WAAc,EACd8H,UAz4BuB,MA24BzBL,EAAc,IAAIzJ,IAAI,mBACtBoJ,EAAK2F,KAAOkB,GAAKC,OAAOC,KAAKF,EAAG,UAAUrP,SAAS,WAGrD,MAAMyF,EAAe6C,EAAa,oCChvC5BkH,EAAclH,EAAa,4BAC3BmH,EAAcnH,EAAa,4BAC3BoH,EAAiBpH,EAAa,kCAoBpC7B,OAAOkC,OAAOuE,EAlBK,CACjByC,UAAa,kCACbC,mBAAsB,2CACtBC,SAAY,iCACZC,SAAY,iCACZC,QAAW,gCACXC,SAAY,iCACZC,KAAQ,6BACRC,IAAO,4BACPC,QAAW,gCACXC,kBAAqB,0CACrBC,UAAa,kCACbC,OAAU,+BACVC,cAAiB,sCACjBC,YAAe,oCACfC,IAAO,kCASLC,EAAW,CACbC,KAAS,EACTZ,QAAY,EACZE,KAAS,EACTK,OAAW,EACXJ,IAAQ,EACRC,QAAY,EACZE,UAAc,EACdD,kBAAsB,EACtBQ,MAAU,EACVC,KAAS,GACTC,IAAQ,IAONC,EAAe,CAEjBC,cAA2B1I,EAAa,8BACxC2I,uBAA2B3I,EAAa,uCACxC4I,kBAA2B5I,EAAa,kCACxC6I,cAA2B7I,EAAa,8BACxC8I,SAA2B9I,EAAa,yBACxC+I,kBAA2B/I,EAAa,kCACxCgJ,oBAA2BhJ,EAAa,oCACxCiJ,mBAA2BjJ,EAAa,mCACxCmH,YAA2BnH,EAAa,4BACxCkJ,oBAA2BlJ,EAAa,oCACxCkH,YAA2BlH,EAAa,4BACxCmJ,eAA2BnJ,EAAa,+BACxCoJ,UAA2BpJ,EAAa,0BACxCqJ,WAA2BrJ,EAAa,2BAGxCsJ,iBAA2BtJ,EAAa,qCACxCuJ,kBAA2BvJ,EAAa,sCACxCwJ,cAA2BxJ,EAAa,kCACxCyJ,kBAA2BzJ,EAAa,sCACxC0J,cAA2B1J,EAAa,kCAGxC2J,aAA2B3J,EAAa,iCACxC4J,gBAA2B5J,EAAa,oCACxC6J,gBAA2B7J,EAAa,oCACxC8J,YAA2B9J,EAAa,gCACxC+J,YAA2B/J,EAAa,gCACxCgK,aAA2BhK,EAAa,iCACxCiK,aAA2BjK,EAAa,iCACxCkK,WAA2BlK,EAAa,8BAA+BmH,GACvEgD,gBAA2BnK,EAAa,oCACxCoK,YAA2BpK,EAAa,gCACxCqK,YAA2BrK,EAAa,gCACxCsK,WAA2BtK,EAAa,+BACxCuK,WAA2BvK,EAAa,8BAA+BkH,GACvEsD,gBAA2BxK,EAAa,oCACxCyK,cAA2BzK,EAAa,kCAGxC0K,gBAA2B1K,EAAa,qCACxC2K,gBAA2B3K,EAAa,qCACxC4K,qBAA2B5K,EAAa,0CACxC6K,qBAA2B7K,EAAa,0CAGxCoH,eAA2BpH,EAAa,kCACxC8K,wBAA4B9K,EAAa,2CACzC+K,oBAA2B/K,EAAa,sCAAuCoH,GAC/E4D,oBAA2BhL,EAAa,sCAAuCoH,GAG/E6D,cAA2BjL,EAAa,mCAGxCkL,SAA2BlL,EAAa,sCACxCmL,SAA2BnL,EAAa,sCACxCoL,UAA2BpL,EAAa,uCACxCqL,WAA2BrL,EAAa,wCACxCsL,iBAA2BtL,EAAa,8CAIxCuL,qBAA2BvL,EAAa,yCACxCwL,qBAA2BxL,EAAa,yCACxCyL,eAA2BzL,EAAa,mCACxC0L,eAA2B1L,EAAa,mCACxC2L,qBAA2B3L,EAAa,yCACxC4L,SAA2B5L,EAAa,6BACxC6L,SAA2B7L,EAAa,6BAIxC8L,cAA2B9L,EAAa,qCACxC+L,iBAA2B/L,EAAa,wCACxCgM,iBAA2BhM,EAAa,wCACxCiM,cAA2BjM,EAAa,qCACxCkM,iBAA2BlM,EAAa,wCACxCmM,iBAA2BnM,EAAa,wCACxCoM,cAA2BpM,EAAa,qCACxCqM,cAA2BrM,EAAa,qCAGxCsM,qBAA2BtM,EAAa,+CACxCuM,oBAA2BvM,EAAa,8CACxCwM,wBAA4BxM,EAAa,kDACzCyM,iBAA2BzM,EAAa,2CACxC0M,iBAA2B1M,EAAa,2CAGxC2M,cAA2B3M,EAAa,oCACxC4M,aAA2B5M,EAAa,oCAyB1C,SAAS6M,EAAUC,GACjB,IAAIC,EAAOD,EAAM1H,KAAK4H,GAAG,IACrBC,EAAS,UAAY,OAAO7H,KAAK8H,IAAI,EAAEH,GAAQ,MAAM3H,KAAK8H,IAAI,EAAEH,GAAQ,MAAO3H,KAAK8H,IAAI,EAAEH,GAE9F,MAAO,CADM,UAAU3H,KAAK8H,IAAIH,GAAQ,KAAK3H,KAAK8H,IAAI,EAAEH,GAAQ,KAAM3H,KAAK8H,IAAI,EAAEH,GACjEE,GCvKlB,MAEMrC,EAAuBnC,EAAamC,qBACpC1D,EAAcuB,EAAavB,YAC3BC,EAAcsB,EAAatB,YAC3B+C,EAAazB,EAAayB,yIAkBjB,MAEbjU,YAAYe,EAAUC,EAAMkW,EAAK,IAC/B,MAAO,WACLvW,KAAK8M,GAAK,IAAIzD,EAAQ,CACpBjJ,SAAWA,EACXC,KAAOA,EACPkW,KAAOA,IAETvW,KAAKwW,eAAiB,EACtBxW,KAAKqC,eAAiB,EACtBrC,KAAKyW,eAAiBjF,EAASC,KAC/BzR,KAAKiG,QAAU,EACfjG,KAAK0W,SAAW,KAGhB,aAFoB1W,KAAK8M,GAAG6J,iBAAiB3I,EAAS2C,WAChD/P,SAAQuP,IAAMnQ,KAAK8M,GAAGW,UAAUzN,KAAK8M,GAAGrH,MAAM0K,OAC7CnQ,MAbF,GAqBTyD,QACEzD,KAAK8M,GAAGrJ,QACRzD,KAAK8M,GAAK,KAOZ8J,WACE,OAAkB,MAAX5W,KAAK8M,GAUdlL,KAAKoK,GACH,OAAIA,GAAYwF,EAASC,MAASzF,GAAYwF,EAASG,MAAQ3F,GAAYwF,EAASI,OAClF5R,KAAKwW,cAAgBxK,GACd,GAUX6K,SAAW7W,KAAKwW,eAAiB,EAMjCM,UAAY,OAAO9W,KAAKwW,eAAiB,EAczCO,QAAQC,EAAIhL,GACV,OAAIgL,GAAM,IAAMhL,GAAYwF,EAASC,MAASzF,GAAYwF,EAASG,MAAQ3F,GAAYwF,EAASI,OAC9F5R,KAAKqC,cAAgB2U,EACrBhX,KAAKyW,eAAiBzK,GACf,GAUXiL,aACEjX,KAAKqC,eAAiB,EACtBrC,KAAKyW,eAAiB,EAOxBS,cAAgB,OAAOlX,KAAKqC,eAAiB,EAM7C2D,wBACE,GAAe,MAAXhG,KAAK8M,GAAY,OAAQ,EAC7B,MAAMqK,QAAiBnX,KAAK8M,GAAGsK,gBAAgBpJ,EAASyC,WACxD,GAAgB,MAAZ0G,EAAkB,OAAQ,EAC9B,MAAME,QAAaF,EAASG,IAAI,WAChC,OAAe,MAARD,EAAeA,GAAQ,EAOhCE,mBAAqB,OAAOvX,KAAKwW,cAMjCgB,mBAAqB,OAAOxX,KAAKqC,cAMjCoV,oBAAsB,OAAOzX,KAAKyW,eAUlClU,WAAWmV,GACLA,EAAK,IAAGA,EAAK,GACjB1X,KAAKiG,QAAUyR,EAOjBC,aAAe,OAAO3X,KAAKiG,QAW3BD,WAAWjE,EAAMiV,EAAGhX,KAAKqC,cAAe2J,EAAShM,KAAKyW,gBACpD,GAAIO,EAAK,GAAgB,MAAXhX,KAAK8M,GAAY,OAAO,EACtC,IAAI8K,EACJ,GAAIpR,MAAMC,QAAQ1E,IAChB6V,EAAM,IAAItH,GACNvO,KAAOA,EACX6V,EAAIZ,GAAKA,EACTY,EAAI5L,SAAWA,MACV,CAAA,KAAIjK,aAAgBuO,GAGzB,OAAO,EAFPsH,EAAM7V,EAIR,IAAI6E,EAAIgR,EAAI5L,SACZ,GAAIpF,GAAK4K,EAASC,OAAS7K,EAAI4K,EAASG,MAAQ/K,EAAI4K,EAASI,KAAM,OAAO,EAC1E,GAAqB,MAAjBgG,EAAI9R,UAAmB,CAMzB,GALqB,MAAjB9F,KAAK0W,WAAkB1W,KAAK0W,eAAiB1W,KAAK8M,GAAGsK,gBAAgBpJ,EAASmD,YAC7D,MAAjBnR,KAAK0W,WAAkB1W,KAAK0W,eAAiB1W,KAAK8M,GAAGsK,gBAAgBpJ,EAASiD,UAC7D,MAAjBjR,KAAK0W,WAAkB1W,KAAK0W,eAAiB1W,KAAK8M,GAAGsK,gBAAgBpJ,EAAS+C,OAC7D,MAAjB/Q,KAAK0W,WAAkB1W,KAAK0W,eAAiB1W,KAAK8M,GAAGsK,gBAAgBpJ,EAAS4C,WAC7D,MAAjB5Q,KAAK0W,WAAkB1W,KAAK0W,eAAiB1W,KAAK8M,GAAGsK,gBAAgBpJ,EAAS2C,WAC7D,MAAjB3Q,KAAK0W,SAAkB,OAAO,EAClCkB,EAAI9R,UAAY9F,KAAK0W,SAEvB,MAAMxP,QAAYlH,KAAK8M,GAAG5G,QAAQ0R,EA/Md,KAgNpB,OAAe,MAAP1Q,GAAeA,EAAIG,MAAQ1C,EAAaE,MASlDmB,gBACE,OAAe,MAAXhG,KAAK8M,GAAmB,WACf9M,KAAK8M,GAAGgB,SAAQjI,IAC3B,GAAIA,EAAIoC,WAAasI,EAAYtI,WAAapC,EAAIoC,WAAaqL,EAAWrL,UAAY,OAAO,EAC7F,IAAIrB,EAAIf,EAAImG,SACZ,OAAIpF,GAAK4K,EAASC,MAAQ7K,GAAK4K,EAASG,QAC/B3R,KAAKwW,cAAgB,GAAKxW,KAAKwW,eAAiB5P,KAGxD5G,KAAKiG,SAOV4R,aAAe,OAAO7X,KAAK8M,GAO3B9G,sBAAsB8R,GACpB,OAAe,MAAX9X,KAAK8M,GAAmB,WACf9M,KAAK8M,GAAGsK,gBAAgBU,GAQvC9R,uBAAuB8R,GACrB,OAAe,MAAX9X,KAAK8M,GAAmB,WACf9M,KAAK8M,GAAG6J,iBAAiBmB,GAQxCvK,MAAMjO,GACJ,OAAe,MAAXU,KAAK8M,GAAmB,KACrB9M,KAAK8M,GAAGS,MAAMjO,GAQvB0G,WAAW+R,GACT,MAAMC,QAAYhY,KAAKoX,gBAAgBpJ,EAAS0C,oBAChD,GAAW,MAAPsH,EAAa,OAAO,KACxB,MAAMJ,EAAM,IAAI5D,EAAqB+D,GACrCH,EAAItY,KAAOyY,EACXH,EAAI9R,UAAYkS,EAChB,MAAM9Q,QAAYlH,KAAK8M,GAAG5G,QAAQ0R,EApRd,KAqRpB,OAAW,MAAP1Q,GAAiBK,OAAO+E,UAAUC,eAAexL,KAAKmG,EAAK,WACxDA,EAAI+Q,QADuE,eDrI/E,SAAeC,EAAQrJ,EAAGsJ,GAC/B,IAAIC,EAAS,IACRC,EAAOhC,GAAUJ,EAAUiC,EAAO,IAGvC,OAFAE,EAAO,GAAKvJ,EAAEwJ,EAASH,EAAO,GAC9BE,EAAO,GAAKD,EAAE9B,EAAS6B,EAAO,GACvBE,aAMF,SAAiBF,EAAQhC,EAAKoC,GACnC,IAAIC,EAAM,IACLF,EAAOhC,GAAUJ,EAAUiC,EAAO,IAGvC,OAFAK,EAAI,IAAMD,EAAIJ,EAAO,IAAMG,EAC3BE,EAAI,IAAMrC,EAAIgC,EAAO,IAAM7B,EACpBkC"}