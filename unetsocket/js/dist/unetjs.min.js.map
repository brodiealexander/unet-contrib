{"version":3,"file":"unetjs.min.js","sources":["../src/unetutils.js","../src/unetsocket.js"],"sourcesContent":["import {AgentID, MessageClass, Services} from 'fjage/dist/esm/fjage';\n\nconst DatagramReq = MessageClass('org.arl.unet.DatagramReq');\nconst DatagramNtf = MessageClass('org.arl.unet.DatagramNtf');\nconst BasebandSignal = MessageClass('org.arl.unet.bb.BasebandSignal');\n\nlet UnetServices = {\n  'NODE_INFO': 'org.arl.unet.Services.NODE_INFO',\n  'ADDRESS_RESOLUTION': 'org.arl.unet.Services.ADDRESS_RESOLUTION',\n  'DATAGRAM': 'org.arl.unet.Services.DATAGRAM',\n  'PHYSICAL': 'org.arl.unet.Services.PHYSICAL',\n  'RANGING': 'org.arl.unet.Services.RANGING',\n  'BASEBAND': 'org.arl.unet.Services.BASEBAND',\n  'LINK': 'org.arl.unet.Services.LINK',\n  'MAC': 'org.arl.unet.Services.MAC',\n  'ROUTING': 'org.arl.unet.Services.ROUTING',\n  'ROUTE_MAINTENANCE': 'org.arl.unet.Services.ROUTE_MAINTENANCE',\n  'TRANSPORT': 'org.arl.unet.Services.TRANSPORT',\n  'REMOTE': 'org.arl.unet.Services.REMOTE',\n  'STATE_MANAGER': 'org.arl.unet.Services.STATE_MANAGER',\n};\n\nObject.assign(Services, UnetServices);\n\n/**\n * Well-known protocol number assignments used in UnetStack\n * @typedef {Object.<string, number>} Protocol\n */\nlet Protocol = {\n  'DATA' : 0,               // Protocol number for user application data.\n  'RANGING' : 1,            // Protocol number for use by ranging agents.\n  'LINK' : 2,               // Protocol number for use by link agents.\n  'REMOTE' : 3,             // Protocol number for use by remote management agents.\n  'MAC' : 4,                // Protocol number for use by MAC protocol agents.\n  'ROUTING' : 5,            // Protocol number for use by routing agents.\n  'TRANSPORT' : 6,          // Protocol number for use by transport agents.\n  'ROUTE_MAINTENANCE' : 7,   // Protocol number for use by route maintenance agents.\n  'LINK2' : 8,              // Protocol number for use by secondary link agents.\n  'USER' : 32,              // Lowest protocol number allowable for user protocols.\n  'MAX' : 63,               // Largest protocol number allowable.\n};\n\n/**\n * Well-known protocol Messages used in UnetStack\n * @typedef {Object.<string, MessageClass>} UnetMessages\n */\nlet UnetMessages = {\n  // unet\n  'TestReportNtf'          : MessageClass('org.arl.unet.TestReportNtf'), \n  'AbnormalTerminationNtf' : MessageClass('org.arl.unet.AbnormalTerminationNtf'), \n  'CapabilityListRsp'      : MessageClass('org.arl.unet.CapabilityListRsp'), \n  'CapabilityReq'          : MessageClass('org.arl.unet.CapabilityReq'), \n  'ClearReq'               : MessageClass('org.arl.unet.ClearReq'), \n  'DatagramCancelReq'      : MessageClass('org.arl.unet.DatagramCancelReq'), \n  'DatagramDeliveryNtf'    : MessageClass('org.arl.unet.DatagramDeliveryNtf'), \n  'DatagramFailureNtf'     : MessageClass('org.arl.unet.DatagramFailureNtf'), \n  'DatagramNtf'            : MessageClass('org.arl.unet.DatagramNtf'), \n  'DatagramProgressNtf'    : MessageClass('org.arl.unet.DatagramProgressNtf'), \n  'DatagramReq'            : MessageClass('org.arl.unet.DatagramReq'), \n  'ParamChangeNtf'         : MessageClass('org.arl.unet.ParamChangeNtf'), \n  'RefuseRsp'              : MessageClass('org.arl.unet.RefuseRsp'), \n  'FailureNtf'             : MessageClass('org.arl.unet.FailureNtf'), \n\n  // net\n  'DatagramTraceReq'       : MessageClass('org.arl.unet.net.DatagramTraceReq'), \n  'RouteDiscoveryReq'      : MessageClass('org.arl.unet.net.RouteDiscoveryReq'), \n  'RouteTraceReq'          : MessageClass('org.arl.unet.net.RouteTraceReq'), \n  'RouteDiscoveryNtf'      : MessageClass('org.arl.unet.net.RouteDiscoveryNtf'), \n  'RouteTraceNtf'          : MessageClass('org.arl.unet.net.RouteTraceNtf'), \n\n  // phy\n  'FecDecodeReq'           : MessageClass('org.arl.unet.phy.FecDecodeReq'), \n  'RxJanusFrameNtf'        : MessageClass('org.arl.unet.phy.RxJanusFrameNtf'), \n  'TxJanusFrameReq'        : MessageClass('org.arl.unet.phy.TxJanusFrameReq'), \n  'BadFrameNtf'            : MessageClass('org.arl.unet.phy.BadFrameNtf'), \n  'BadRangeNtf'            : MessageClass('org.arl.unet.phy.BadRangeNtf'),\n  'ClearSyncReq'           : MessageClass('org.arl.unet.phy.ClearSyncReq'), \n  'CollisionNtf'           : MessageClass('org.arl.unet.phy.CollisionNtf'), \n  'RxFrameNtf'             : MessageClass('org.arl.unet.phy.RxFrameNtf', DatagramNtf), \n  'RxFrameStartNtf'        : MessageClass('org.arl.unet.phy.RxFrameStartNtf'), \n  'SyncInfoReq'            : MessageClass('org.arl.unet.phy.SyncInfoReq'), \n  'SyncInfoRsp'            : MessageClass('org.arl.unet.phy.SyncInfoRsp'), \n  'TxFrameNtf'             : MessageClass('org.arl.unet.phy.TxFrameNtf'), \n  'TxFrameReq'             : MessageClass('org.arl.unet.phy.TxFrameReq', DatagramReq), \n  'TxFrameStartNtf'        : MessageClass('org.arl.unet.phy.TxFrameStartNtf'), \n  'TxRawFrameReq'          : MessageClass('org.arl.unet.phy.TxRawFrameReq'), \n\n  // addr\n  'AddressAllocReq'        : MessageClass('org.arl.unet.addr.AddressAllocReq'), \n  'AddressAllocRsp'        : MessageClass('org.arl.unet.addr.AddressAllocRsp'), \n  'AddressResolutionReq'   : MessageClass('org.arl.unet.addr.AddressResolutionReq'), \n  'AddressResolutionRsp'   : MessageClass('org.arl.unet.addr.AddressResolutionRsp'), \n\n  // bb\n  'BasebandSignal'         : MessageClass('org.arl.unet.bb.BasebandSignal'), \n  'RecordBasebandSignalReq' : MessageClass('org.arl.unet.bb.RecordBasebandSignalReq'), \n  'RxBasebandSignalNtf'    : MessageClass('org.arl.unet.bb.RxBasebandSignalNtf', BasebandSignal), \n  'TxBasebandSignalReq'    : MessageClass('org.arl.unet.bb.TxBasebandSignalReq', BasebandSignal), \n\n  // link\n  'LinkStatusNtf'          : MessageClass('org.arl.unet.link.LinkStatusNtf'), \n\n  // localization\n  'RangeNtf'               : MessageClass('org.arl.unet.localization.RangeNtf'), \n  'RangeReq'               : MessageClass('org.arl.unet.localization.RangeReq'), \n  'BeaconReq'              : MessageClass('org.arl.unet.localization.BeaconReq'), \n  'RespondReq'             : MessageClass('org.arl.unet.localization.RespondReq'), \n  'InterrogationNtf'       : MessageClass('org.arl.unet.localization.InterrogationNtf'), \n\n\n  // mac\n  'ReservationAcceptReq'   : MessageClass('org.arl.unet.mac.ReservationAcceptReq'), \n  'ReservationCancelReq'   : MessageClass('org.arl.unet.mac.ReservationCancelReq'), \n  'ReservationReq'         : MessageClass('org.arl.unet.mac.ReservationReq'), \n  'ReservationRsp'         : MessageClass('org.arl.unet.mac.ReservationRsp'), \n  'ReservationStatusNtf'   : MessageClass('org.arl.unet.mac.ReservationStatusNtf'), \n  'RxAckNtf'               : MessageClass('org.arl.unet.mac.RxAckNtf'), \n  'TxAckReq'               : MessageClass('org.arl.unet.mac.TxAckReq'), \n\n\n  // remote\n  'RemoteExecReq'          : MessageClass('org.arl.unet.remote.RemoteExecReq'), \n  'RemoteFailureNtf'       : MessageClass('org.arl.unet.remote.RemoteFailureNtf'), \n  'RemoteFileGetReq'       : MessageClass('org.arl.unet.remote.RemoteFileGetReq'), \n  'RemoteFileNtf'          : MessageClass('org.arl.unet.remote.RemoteFileNtf'), \n  'RemoteFilePutReq'       : MessageClass('org.arl.unet.remote.RemoteFilePutReq'), \n  'RemoteSuccessNtf'       : MessageClass('org.arl.unet.remote.RemoteSuccessNtf'), \n  'RemoteTextNtf'          : MessageClass('org.arl.unet.remote.RemoteTextNtf'), \n  'RemoteTextReq'          : MessageClass('org.arl.unet.remote.RemoteTextReq'), \n\n  // scheduler\n  'AddScheduledSleepReq'   : MessageClass('org.arl.unet.scheduler.AddScheduledSleepReq'), \n  'GetSleepScheduleReq'    : MessageClass('org.arl.unet.scheduler.GetSleepScheduleReq'), \n  'RemoveScheduledSleepReq' : MessageClass('org.arl.unet.scheduler.RemoveScheduledSleepReq'), \n  'SleepScheduleRsp'       : MessageClass('org.arl.unet.scheduler.SleepScheduleRsp'), \n  'WakeFromSleepNtf'       : MessageClass('org.arl.unet.scheduler.WakeFromSleepNtf'), \n\n  // state\n  'ClearStateReq'          : MessageClass('org.arl.unet.state.ClearStateReq'), \n  'SaveStateReq'           : MessageClass('org.arl.unet.state.SaveStateReq')\n};\n\n/**\n * A message which requests the transmission of the datagram from the Unet\n * \n * @typedef {Message} DatagramReq\n * @property {number[]} data - data as an Array of bytes\n * @property {number} from - from/source node address\n * @property {number} to - to/destination node address\n * @property {number} protocol - protocol number to be used to send this Datagram\n * @property {boolean} reliability - true if Datagram should be reliable, false if unreliable\n * @property {number} ttl - time-to-live for the datagram. Time-to-live is advisory, and an agent may choose it ignore it\n */\n\n/**\n * Notification of received datagram message received by the Unet node.\n * \n * @typedef {Message} DatagramNtf\n * @property {number[]} data - data as an Array of bytes\n * @property {number} from - from/source node address\n * @property {number} to - to/destination node address\n * @property {number} protocol - protocol number to be used to send this Datagram\n * @property {number} ttl - time-to-live for the datagram. Time-to-live is advisory, and an agent may choose it ignore it\n */\n\n/**\n * An identifier for an agent or a topic.\n * @external AgentID\n * @see {@link https://org-arl.github.io/fjage/jsdoc/|fj책ge.js Documentation}\n */\n\n/**\n * Services supported by fjage agents.\n * @external Services\n * @see {@link https://org-arl.github.io/fjage/jsdoc/|fj책ge.js Documentation}\n */\n\n/**\n *  An action represented by a message.\n * @external Performative\n * @see {@link https://org-arl.github.io/fjage/jsdoc/|fj책ge.js Documentation}\n */\n\n/**\n * Function to creates a unqualified message class based on a fully qualified name.\n * @external MessageClass\n * @see {@link https://org-arl.github.io/fjage/jsdoc/|fj책ge.js Documentation}\n */\n\n/**\n * @external Gateway\n * @see {@link https://org-arl.github.io/fjage/jsdoc/|fj책ge.js Documentation}\n */\n\nexport {AgentID, Services, UnetMessages, Protocol};\n","import {Gateway, Performative} from 'fjage/dist/esm/fjage.js';\nimport {Services, UnetMessages, Protocol} from './unetutils.js';\n\nconst REQUEST_TIMEOUT = 1000;\n\nconst AddressResolutionReq = UnetMessages.AddressResolutionReq;\nconst DatagramReq = UnetMessages.DatagramReq;\nconst DatagramNtf = UnetMessages.DatagramNtf;\nconst RxFrameNtf = UnetMessages.RxFrameNtf;\n\n/**\n * Creates a new UnetSocket to connect to a running Unet instance. This constructor returns a \n * {@link Promise} instead of the constructed UnetSocket object. Use `await` or `.then()` to get \n * a reference to the UnetSocket object. Based on if this is run in a Browser or Node.js, \n * it will internally connect over WebSockets or TCP respectively.\n *\n * \n * @class UnetSocket\n * @param {string} [hostname] - hostname/ip address of the master container to connect to\n * @param {number} [port] - port number of the master container to connect to\n * @param {string} [path='']  - path of the master container to connect to (for WebSockets)\n * @returns {Promise<UnetSocket>} - Promise which resolves to the UnetSocket object being constructed\n * \n * @example\n * let socket = await new UnetSocket('localhost', 8081, '/ws/');\n */\nexport default class UnetSocket {\n\n  constructor(hostname, port, path='') { \n    return (async () => {\n      this.gw = new Gateway({\n        hostname : hostname,\n        port : port,\n        path : path\n      });\n      this.localProtocol = -1;\n      this.remoteAddress = -1;\n      this.remoteProtocol = Protocol.DATA;\n      this.timeout = 0;\n      this.provider = null;\n      const alist = await this.gw.agentsForService(Services.DATAGRAM);\n      alist.forEach(a => {this.gw.subscribe(this.gw.topic(a));});\n      return this;\n    })();\n  }\n\n  /**\n   * Closes the socket. The socket functionality may not longer be accessed after this method is called.\n   * @returns {void}\n   */\n  close() {\n    this.gw.close();\n    this.gw = null;\n  }\n\n  /**\n   * Checks if a socket is closed.\n   * @returns {boolean} - true if closed, false if open\n   */\n  isClosed() { \n    return this.gw == null;\n  }\n\n  /**\n   * Binds a socket to listen to a specific protocol datagrams.\n   * Protocol numbers between Protocol.DATA+1 to Protocol.USER-1 are reserved protocols \n   * and cannot be bound. Unbound sockets listen to all unreserved\n   * @param {Protocol} protocol - protocol number to listen for\n   * @returns {boolean} - true on success, false on failure\n   */\n  bind(protocol) {\n    if (protocol == Protocol.DATA || (protocol >= Protocol.USER && protocol <= Protocol.MAX)) {\n      this.localProtocol = protocol;\n      return true;\n    }\n    return false;\n  }\n  \n  /**\n   * Unbinds a socket so that it listens to all unreserved protocols. \n   * Protocol numbers between Protocol.DATA+1 to Protocol.USER-1 are considered reserved.\n   * @returns {void}\n   */\n  unbind() { this.localProtocol = -1;}\n\n  /**\n   * Checks if a socket is bound.\n   * @returns {boolean} - true if bound to a protocol, false if unbound\n   */\n  isBound() { return this.localProtocol >= 0;}\n\n  /**\n   * Sets the default destination address and destination protocol number for datagrams sent \n   * using this socket. The defaults can be overridden for specific send() calls. \n   * The default protcol number when a socket is opened is Protcol.DATA. \n   * The default node address is undefined. \n   * Protocol numbers between Protocol.DATA+1 to Protocol.USER-1 are considered reserved, \n   * and cannot be used for sending datagrams using the socket.\n   * \n   * @param {number} to - default destination node address\n   * @param {Protocol} protocol - default protocol number\n   * @returns {boolean} - true on success, false on failure\n   */\n  connect(to, protocol) {\n    if (to >= 0 && (protocol == Protocol.DATA || (protocol >= Protocol.USER && protocol <= Protocol.MAX))) {\n      this.remoteAddress = to;\n      this.remoteProtocol = protocol;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Resets the default destination address to undefined, and the default protocol number \n   * to Protocol.DATA.\n   * @returns {void}\n   */\n  disconnect() { \n    this.remoteAddress = -1;\n    this.remoteProtocol = 0;\n  }\n\n  /**\n   * Checks if a socket is connected, i.e., has a default destination address and protocol number.\n   * @returns {boolean} - true if connected, false otherwise\n   */\n  isConnected() { return this.remoteAddress >= 0; }\n\n  /**\n   * Gets the local node address of the Unet node connected to.\n   * @returns {Promise<int>} - local node address, or -1 on error\n   */\n  async getLocalAddress() { \n    if (this.gw == null) return -1;\n    const nodeinfo = await this.gw.agentForService(Services.NODE_INFO);\n    if (nodeinfo == null) return -1;\n    const addr = await nodeinfo.get('address');\n    return addr != null ? addr : -1;\n  }\n\n  /**\n   * Gets the protocol number that the socket is bound to.\n   * @returns {number}} - protocol number if socket is bound, -1 otherwise\n   */\n  getLocalProtocol() { return this.localProtocol; }\n\n  /**\n   * Gets the default destination node address for a connected socket.\n   * @returns {number}} - default destination node address if connected, -1 otherwise\n   */\n  getRemoteAddress() { return this.remoteAddress; }\n\n  /**\n   * Gets the default transmission protocol number.\n   * @returns {number}} - default protocol number used to transmit a datagram\n   */\n  getRemoteProtocol() { return this.remoteProtocol; }\n\n  /**\n   * Sets the timeout for datagram reception. A timeout of 0 means the \n   * {@link UnetSocket#receive|receive method} will check any appropriate \n   * Datagram has already been received (and is cached) else return immediately.\n   * \n   * @param {number} ms - timeout in milliseconds\n   * @returns {void}\n   */\n  setTimeout(ms) { \n    if (ms < 0) ms = 0;\n    this.timeout = ms;\n  }\n\n  /**\n   * Gets the timeout for datagram reception.\n   * @returns {number} - timeout in milliseconds\n   */\n  getTimeout() { return this.timeout; }\n\n  /**\n   * Transmits a datagram to the specified node address using the specified protocol.\n   * Protocol numbers between Protocol.DATA+1 to Protocol.USER-1 are considered reserved,\n   * and cannot be used for sending datagrams using the socket.\n   * @param {number[]|DatagramReq} data - data to be sent over the socket as an Array of bytes or DatagramReq\n   * @param {number} to - destination node address\n   * @param {number} protocol - protocol number\n   * @returns {Promise<boolean>} - true if the Unet node agreed to send out the Datagram, false otherwise\n   */\n  async send(data, to=this.remoteAddress, protocol=this.remoteProtocol) {\n    if (to < 0 || this.gw == null) return false;\n    var req;\n    if (Array.isArray(data)){\n      req = new DatagramReq();\n      req.data = data;\n      req.to = to;\n      req.protocol = protocol;\n    } else if (data instanceof DatagramReq){\n      req = data;\n    } else {\n      return false;\n    }\n    let p = req.protocol;\n    if (p != Protocol.DATA && (p < Protocol.USER || p > Protocol.MAX)) return false;\n    if (req.recipient == null) {\n      if (this.provider == null) this.provider = await this.gw.agentForService(Services.TRANSPORT);\n      if (this.provider == null) this.provider = await this.gw.agentForService(Services.ROUTING);\n      if (this.provider == null) this.provider = await this.gw.agentForService(Services.LINK);\n      if (this.provider == null) this.provider = await this.gw.agentForService(Services.PHYSICAL);\n      if (this.provider == null) this.provider = await this.gw.agentForService(Services.DATAGRAM);\n      if (this.provider == null) return false;\n      req.recipient = this.provider;\n    }\n    const rsp = await this.gw.request(req, REQUEST_TIMEOUT);\n    return (rsp != null && rsp.perf == Performative.AGREE);\n  }\n\n  /**\n   * Receives a datagram sent to the local node and the bound protocol number. If the socket is unbound, \n   * then datagrams with all unreserved protocols are received. Any broadcast datagrams are also received.\n   * \n   * @returns {Promise<?DatagramNtf>} - datagram received by the socket\n   */\n  async receive() { \n    if (this.gw == null) return null;\n    return await this.gw.receive(msg => {\n      if (msg.__clazz__ != DatagramNtf.__clazz__ && msg.__clazz__ != RxFrameNtf.__clazz__ ) return false;\n      let p = msg.protocol;\n      if (p == Protocol.DATA || p >= Protocol.USER) {\n        return this.localProtocol < 0 || this.localProtocol == p;\n      }\n      return false;\n    }, this.timeout);\n  }\n\n  /**\n   * Gets a Gateway to provide low-level access to UnetStack.\n   * @returns {Gateway} - underlying fjage Gateway supporting this socket\n   */\n  getGateway() { return this.gw; }\n\n  /**\n   * Gets an AgentID providing a specified service for low-level access to UnetStack\n   * @param {string} svc - the named service of interest\n   * @returns {Promise<?AgentID>} - a promise which returns an {@link AgentID} that provides the service when resolved\n   */\n  async agentForService(svc) {\n    if (this.gw == null) return null;\n    return await this.gw.agentForService(svc);\n  }\n\n  /**\n   * \n   * @param {string} svc - the named service of interest\n   * @returns {Promise<AgentID[]>} - a promise which returns an array of {@link AgentID|AgentIDs} that provides the service when resolved\n   */\n  async agentsForService(svc) {\n    if (this.gw == null) return null;\n    return await this.gw.agentsForService(svc);\n  }\n\n  /**\n   * Gets a named AgentID for low-level access to UnetStack.\n   * @param {string} name - name of agent\n   * @returns {AgentID} - AgentID for the given name\n   */\n  agent(name) {\n    if (this.gw == null) return null;\n    return this.gw.agent(name);\n  }\n\n  /**\n   * Resolve node name to node address.\n   * @param {string} nodeName - name of the node to resolve\n   * @returns {Promise<?number>} - address of the node, or null if unable to resolve\n   */\n  async host(nodeName) { \n    const arp = await this.agentForService(Services.ADDRESS_RESOLUTION);\n    if (arp == null) return null;\n    const req = new AddressResolutionReq(nodeName);\n    req.name = nodeName;\n    req.recipient = arp;\n    const rsp = await this.gw.request(req, REQUEST_TIMEOUT);\n    if (rsp == null || ! Object.prototype.hasOwnProperty.call(rsp, 'address')) return null;\n    return rsp.address;\n  }\n}"],"names":["DatagramReq","MessageClass","DatagramNtf","BasebandSignal","Object","assign","Services","NODE_INFO","ADDRESS_RESOLUTION","DATAGRAM","PHYSICAL","RANGING","BASEBAND","LINK","MAC","ROUTING","ROUTE_MAINTENANCE","TRANSPORT","REMOTE","STATE_MANAGER","Protocol","DATA","LINK2","USER","MAX","UnetMessages","TestReportNtf","AbnormalTerminationNtf","CapabilityListRsp","CapabilityReq","ClearReq","DatagramCancelReq","DatagramDeliveryNtf","DatagramFailureNtf","DatagramProgressNtf","ParamChangeNtf","RefuseRsp","FailureNtf","DatagramTraceReq","RouteDiscoveryReq","RouteTraceReq","RouteDiscoveryNtf","RouteTraceNtf","FecDecodeReq","RxJanusFrameNtf","TxJanusFrameReq","BadFrameNtf","BadRangeNtf","ClearSyncReq","CollisionNtf","RxFrameNtf","RxFrameStartNtf","SyncInfoReq","SyncInfoRsp","TxFrameNtf","TxFrameReq","TxFrameStartNtf","TxRawFrameReq","AddressAllocReq","AddressAllocRsp","AddressResolutionReq","AddressResolutionRsp","RecordBasebandSignalReq","RxBasebandSignalNtf","TxBasebandSignalReq","LinkStatusNtf","RangeNtf","RangeReq","BeaconReq","RespondReq","InterrogationNtf","ReservationAcceptReq","ReservationCancelReq","ReservationReq","ReservationRsp","ReservationStatusNtf","RxAckNtf","TxAckReq","RemoteExecReq","RemoteFailureNtf","RemoteFileGetReq","RemoteFileNtf","RemoteFilePutReq","RemoteSuccessNtf","RemoteTextNtf","RemoteTextReq","AddScheduledSleepReq","GetSleepScheduleReq","RemoveScheduledSleepReq","SleepScheduleRsp","WakeFromSleepNtf","ClearStateReq","SaveStateReq","[object Object]","hostname","port","path","this","gw","Gateway","localProtocol","remoteAddress","remoteProtocol","timeout","provider","agentsForService","forEach","a","subscribe","topic","close","protocol","to","nodeinfo","agentForService","addr","get","ms","data","req","Array","isArray","p","recipient","rsp","request","perf","Performative","AGREE","receive","msg","__clazz__","svc","name","agent","nodeName","arp","prototype","hasOwnProperty","call","address"],"mappings":"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"}