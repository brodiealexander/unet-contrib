{"version":3,"file":"unetjs.min.js","sources":["../node_modules/fjage/dist/esm/fjage.js","../src/unetutils.js","../src/unetsocket.js"],"sourcesContent":["/* fjage.js v1.10.3 */\n\nconst isBrowser =\n  typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n\nconst isNode =\n  typeof process !== \"undefined\" &&\n  process.versions != null &&\n  process.versions.node != null;\n\nconst isWebWorker =\n  typeof self === \"object\" &&\n  self.constructor &&\n  self.constructor.name === \"DedicatedWorkerGlobalScope\";\n\n/**\n * @see https://github.com/jsdom/jsdom/releases/tag/12.0.0\n * @see https://github.com/jsdom/jsdom/issues/1537\n */\nconst isJsDom =\n  (typeof window !== \"undefined\" && window.name === \"nodejs\") ||\n  (typeof navigator !== \"undefined\" &&\n    (navigator.userAgent.includes(\"Node.js\") ||\n      navigator.userAgent.includes(\"jsdom\")));\n\ntypeof Deno !== \"undefined\" && typeof Deno.core !== \"undefined\";\n\nconst SOCKET_OPEN = 'open';\nconst SOCKET_OPENING = 'opening';\n\nvar createConnection;\n\n/**\n * @class\n * @ignore\n */\nclass TCPconnector {\n\n  /**\n    * Create an TCPConnector to connect to a fjage master over TCP\n    * @param {Object} opts\n    * @param {String} [opts.hostname='localhost'] - ip address/hostname of the master container to connect to\n    * @param {number} opts.port - port number of the master container to connect to\n    */\n  constructor(opts = {}) {\n    this.url = new URL('tcp://localhost');\n    let host = opts.hostname || 'localhost';\n    let port = opts.port || -1;\n    this.url.hostname = opts.hostname;\n    this.url.port = opts.port;\n    this._buf = '';\n    this.pendingOnOpen = [];              // list of callbacks make as soon as gateway is open\n    this.connListeners = [];              // external listeners wanting to listen connection events\n    this._sockInit(host, port);\n  }\n\n\n  _sendConnEvent(val) {\n    this.connListeners.forEach(l => {\n      l && {}.toString.call(l) === '[object Function]' && l(val);\n    });\n  }\n\n  _sockInit(host, port){\n    if (!createConnection){\n      try {\n        import('net').then(module => {\n          createConnection = module.createConnection;\n          this._sockSetup(host, port);\n        });\n      }catch(error){\n        if(this.debug) console.log('Unable to import net module');\n      }\n    }else {\n      this._sockSetup(host, port);\n    }  \n  }\n\n  _sockSetup(host, port){\n    if(!createConnection) return;\n    try{\n      this.sock = createConnection({ 'host': host, 'port': port });\n      this.sock.setEncoding('utf8');\n      this.sock.on('connect', this._onSockOpen.bind(this));\n      this.sock.on('error', this._sockReconnect.bind(this));\n      this.sock.on('close', () => {this._sendConnEvent(false);});\n      this.sock.send = data => {this.sock.write(data);};\n    } catch (error) {\n      if(this.debug) console.log('Connection failed to ', this.sock.host + ':' + this.sock.port);\n      return;\n    }\n  }\n\n  _sockReconnect(){\n    if (this._firstConn || !this.keepAlive || this.sock.readyState == SOCKET_OPENING || this.sock.readyState == SOCKET_OPEN) return;\n    if (this._firstReConn) this._sendConnEvent(false);\n    this._firstReConn = false;\n    if(this.debug) console.log('Reconnecting to ', this.sock.remoteAddress + ':' + this.sock.remotePort);\n    setTimeout(() => {\n      this.pendingOnOpen = [];\n      this._sockSetup(this.sock.url);\n    }, this._reconnectTime);\n  }\n\n  _onSockOpen() {\n    this._sendConnEvent(true);\n    this.sock.on('close', this._sockReconnect.bind(this));\n    this.sock.on('data', this._processSockData.bind(this));\n    this.pendingOnOpen.forEach(cb => cb());\n    this.pendingOnOpen.length = 0;\n    this._buf = '';\n  }\n\n  _processSockData(s){\n    this._buf += s;\n    var lines = this._buf.split('\\n');\n    lines.forEach((l, idx) => {\n      if (idx < lines.length-1){\n        if (l && this._onSockRx) this._onSockRx.call(this,l);\n      } else {\n        this._buf = l;\n      }\n    });\n  }\n\n  toString(){\n    let s = '';\n    s += 'TCPConnector [' + this.sock ? this.sock.remoteAddress.toString() + ':' + this.sock.remotePort.toString() : '' + ']';\n    return s;\n  }\n\n  /**\n   * Write a string to the connector\n   * @param {string} s - string to be written out of the connector to the master\n   * @return {boolean} - true if connect was able to write or queue the string to the underlying socket\n   */\n  write(s){\n    if (!this.sock || this.sock.readyState == SOCKET_OPENING){\n      this.pendingOnOpen.push(() => {\n        this.sock.send(s+'\\n');\n      });\n      return true;\n    } else if (this.sock.readyState == SOCKET_OPEN) {\n      this.sock.send(s+'\\n');\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Set a callback for receiving incoming strings from the connector\n   * @param {TCPConnector~ReadCallback} cb - callback that is called when the connector gets a string\n   */\n  setReadCallback(cb){\n    if (cb && {}.toString.call(cb) === '[object Function]') this._onSockRx = cb;\n  }\n\n  /**\n   * @callback TCPConnector~ReadCallback\n   * @ignore\n   * @param {string} s - incoming message string\n   */\n  \n  /**\n   * Add listener for connection events\n   * @param {function} listener - a listener callback that is called when the connection is opened/closed\n   */\n  addConnectionListener(listener){\n    this.connListeners.push(listener);\n  }\n\n  /**\n   * Remove listener for connection events\n   * @param {function} listener - remove the listener for connection\n   * @return {boolean} - true if the listner was removed successfully\n   */\n  removeConnectionListener(listener) {\n    let ndx = this.connListeners.indexOf(listener);\n    if (ndx >= 0) {\n      this.connListeners.splice(ndx, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Close the connector\n   */\n  close(){\n    if (!this.sock) return;\n    if (this.sock.readyState == SOCKET_OPENING) {\n      this.pendingOnOpen.push(() => {\n        this.sock.send('{\"alive\": false}\\n');\n        this.sock.onclose = null;\n        this.sock.destroy();\n      });\n    } else if (this.sock.readyState == SOCKET_OPEN) {\n      this.sock.send('{\"alive\": false}\\n');\n      this.sock.onclose = null;\n      this.sock.destroy();\n    }\n  }\n}\n\nconst DEFAULT_RECONNECT_TIME = 5000;       // ms, delay between retries to connect to the server.\n\n/**\n * @class\n * @ignore\n */\nclass WSConnector {\n\n  /**\n   * Create an WSConnector to connect to a fjage master over WebSockets\n   * @param {Object} opts\n   * @param {string} opts.hostname - hostname/ip address of the master container to connect to\n   * @param {number} opts.port - port number of the master container to connect to\n   * @param {string} opts.pathname - path of the master container to connect to\n   * @param {boolean} opts.keepAlive - try to reconnect if the connection is lost\n   * @param {number} [opts.reconnectTime=5000] - time before reconnection is attempted after an error\n   */\n  constructor(opts = {}) {\n    this.url = new URL('ws://localhost');\n    this.url.hostname = opts.hostname;      \n    this.url.port = opts.port;\n    this.url.pathname = opts.pathname;\n    this._reconnectTime = opts.reconnectTime || DEFAULT_RECONNECT_TIME;\n    this._keepAlive = opts.keepAlive;\n    this.debug = opts.debug || false;      // debug info to be logged to console?\n    this._firstConn = true;               // if the Gateway has managed to connect to a server before\n    this._firstReConn = true;             // if the Gateway has attempted to reconnect to a server before\n    this.pendingOnOpen = [];              // list of callbacks make as soon as gateway is open\n    this.connListeners = [];              // external listeners wanting to listen connection events\n    this._websockSetup(this.url);\n  }\n\n  _sendConnEvent(val) {\n    this.connListeners.forEach(l => {\n      l && {}.toString.call(l) === '[object Function]' && l(val);\n    });\n  }\n\n  _websockSetup(url){\n    try {\n      this.sock = new WebSocket(url);\n      this.sock.onerror = this._websockReconnect.bind(this);\n      this.sock.onopen = this._onWebsockOpen.bind(this);\n      this.sock.onclose = () => {this._sendConnEvent(false);};\n    } catch (error) {\n      if(this.debug) console.log('Connection failed to ', url);\n      return;\n    }\n  }\n\n  _websockReconnect(){\n    if (this._firstConn || !this._keepAlive || this.sock.readyState == this.sock.CONNECTING || this.sock.readyState == this.sock.OPEN) return;\n    if (this._firstReConn) this._sendConnEvent(false);\n    this._firstReConn = false;\n    if(this.debug) console.log('Reconnecting to ', this.sock.url);\n    setTimeout(() => {\n      this.pendingOnOpen = [];\n      this._websockSetup(this.sock.url);\n    }, this._reconnectTime);\n  }\n\n  _onWebsockOpen() {\n    if(this.debug) console.log('Connected to ', this.sock.url);\n    this._sendConnEvent(true);\n    this.sock.onclose = this._websockReconnect.bind(this);\n    this.sock.onmessage = event => { if (this._onWebsockRx) this._onWebsockRx.call(this,event.data); };\n    this._firstConn = false;\n    this._firstReConn = true;\n    this.pendingOnOpen.forEach(cb => cb());\n    this.pendingOnOpen.length = 0;\n  }\n\n  toString(){\n    let s = '';\n    s += 'WSConnector [' + this.sock ? this.sock.url.toString() : '' + ']';\n    return s;\n  }\n\n  /**\n   * Write a string to the connector\n   * @param {string} s - string to be written out of the connector to the master\n   */\n  write(s){\n    if (!this.sock || this.sock.readyState == this.sock.CONNECTING){\n      this.pendingOnOpen.push(() => {\n        this.sock.send(s+'\\n');\n      });\n      return true;\n    } else if (this.sock.readyState == this.sock.OPEN) {\n      this.sock.send(s+'\\n');\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Set a callback for receiving incoming strings from the connector\n   * @param {WSConnector~ReadCallback} cb - callback that is called when the connector gets a string\n   * @ignore\n   */\n  setReadCallback(cb){\n    if (cb && {}.toString.call(cb) === '[object Function]') this._onWebsockRx = cb;\n  }\n\n  /**\n   * @callback WSConnector~ReadCallback\n   * @ignore\n   * @param {string} s - incoming message string\n   */\n  \n  /**\n   * Add listener for connection events\n   * @param {function} listener - a listener callback that is called when the connection is opened/closed\n   */\n  addConnectionListener(listener){\n    this.connListeners.push(listener);\n  }\n\n  /**\n   * Remove listener for connection events\n   * @param {function} listener - remove the listener for connection\n   * @return {boolean} - true if the listner was removed successfully\n   */\n  removeConnectionListener(listener) {\n    let ndx = this.connListeners.indexOf(listener);\n    if (ndx >= 0) {\n      this.connListeners.splice(ndx, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Close the connector\n   */\n  close(){\n    if (!this.sock) return;\n    if (this.sock.readyState == this.sock.CONNECTING) {\n      this.pendingOnOpen.push(() => {\n        this.sock.send('{\"alive\": false}\\n');\n        this.sock.onclose = null;\n        this.sock.close();\n      });\n    } else if (this.sock.readyState == this.sock.OPEN) {\n      this.sock.send('{\"alive\": false}\\n');\n      this.sock.onclose = null;\n      this.sock.close();\n    }\n  }\n}\n\n/* global global Buffer */\n\nconst DEFAULT_QUEUE_SIZE = 128;        // max number of old unreceived messages to store\n\n/**\n * An action represented by a message. The performative actions are a subset of the\n * FIPA ACL recommendations for interagent communication.\n * @typedef {Object} Performative\n */\nconst Performative = {\n  REQUEST: 'REQUEST',               // Request an action to be performed\n  AGREE: 'AGREE',                   // Agree to performing the requested action\n  REFUSE: 'REFUSE',                 // Refuse to perform the requested action\n  FAILURE: 'FAILURE',               // Notification of failure to perform a requested or agreed action\n  INFORM: 'INFORM',                 // Notification of an event\n  CONFIRM: 'CONFIRM',               // Confirm that the answer to a query is true\n  DISCONFIRM: 'DISCONFIRM',         // Confirm that the answer to a query is false\n  QUERY_IF: 'QUERY_IF',             // Query if some statement is true or false\n  NOT_UNDERSTOOD: 'NOT_UNDERSTOOD', // Notification that a message was not understood\n  CFP: 'CFP',                       // Call for proposal\n  PROPOSE: 'PROPOSE',               // Response for CFP\n  CANCEL: 'CANCEL'                  // Cancel pending request\n};\n\n/**\n * An identifier for an agent or a topic.\n * @class\n * @param {string} name - name of the agent\n * @param {boolean} topic - name of topic\n * @param {Gateway} owner - Gateway owner for this AgentID\n */\nclass AgentID {\n\n\n  constructor(name, topic, owner) {\n    this.name = name;\n    this.topic = topic;\n    this.owner = owner;\n  }\n\n  /**\n   * Gets the name of the agent or topic.\n   *\n   * @returns {string} - name of agent or topic\n   */\n  getName() {\n    return this.name;\n  }\n\n  /**\n   * Returns true if the agent id represents a topic.\n   *\n   * @returns {boolean} - true if the agent id represents a topic, false if it represents an agent\n   */\n  isTopic() {\n    return this.topic;\n  }\n\n  /**\n   * Sends a message to the agent represented by this id.\n   *\n   * @param {string} msg - message to send\n   * @returns {void}\n   */\n  send(msg) {\n    msg.recipient = this.toJSON();\n    this.owner.send(msg);\n  }\n\n  /**\n   * Sends a request to the agent represented by this id and waits for a reponse.\n   *\n   * @param {Message} msg - request to send\n   * @param {number} [timeout=1000] - timeout in milliseconds\n   * @returns {Promise<Message>} - response\n   */\n  async request(msg, timeout=1000) {\n    msg.recipient = this.toJSON();\n    return this.owner.request(msg, timeout);\n  }\n\n  /**\n   * Gets a string representation of the agent id.\n   *\n   * @returns {string} - string representation of the agent id\n   */\n  toString() {\n    return this.toJSON() + ((this.owner && this.owner.connector) ? ` on ${this.owner.connector.url}` : '');\n  }\n\n  /**\n   * Gets a JSON string representation of the agent id.\n   *\n   * @returns {string} - JSON string representation of the agent id\n   */\n  toJSON() {\n    return (this.topic ? '#' : '') + this.name;\n  }\n\n  /**\n   * Sets parameter(s) on the Agent referred to by this AgentID.\n   *\n   * @param {(string|string[])} params - parameters name(s) to be set\n   * @param {(Object|Object[])} values - parameters value(s) to be set\n   * @param {number} [index=-1] - index of parameter(s) to be set\n   * @param {number} [timeout=5000] - timeout for the response\n   * @returns {Promise<(Object|Object[])>} - a promise which returns the new value(s) of the parameters\n   */\n  async set (params, values, index=-1, timeout=5000) {\n    if (!params) return null;\n    let msg = new ParameterReq();\n    msg.recipient = this.name;\n    if (Array.isArray(params)){\n      msg.param = params.shift();\n      msg.value = values.shift();\n      msg.requests = params.map((p, i) => {\n        return {\n          'param': p,\n          'value': values[i]\n        };\n      });\n      // Add back for generating a response\n      params.unshift(msg.param);\n    } else {\n      msg.param = params;\n      msg.value = values;\n    }\n    msg.index = Number.isInteger(index) ? index : -1;\n    const rsp = await this.owner.request(msg, timeout);\n    var ret = Array.isArray(params) ? new Array(params.length).fill(null) : null;\n    if (!rsp || rsp.perf != Performative.INFORM || !rsp.param) return ret;\n    if (Array.isArray(params)) {\n      if (!rsp.values) rsp.values = {};\n      if (rsp.param) rsp.values[rsp.param] = rsp.value;\n      const rvals = Object.keys(rsp.values);\n      return params.map( p => {\n        let f = rvals.find(rv => rv.endsWith(p));\n        return f ? rsp.values[f] : null;\n      });\n    } else {\n      return rsp.value;\n    }\n  }\n\n\n  /**\n   * Gets parameter(s) on the Agent referred to by this AgentID.\n   *\n   * @param {(?string|?string[])} params - parameters name(s) to be get, null implies get value of all parameters on the Agent\n   * @param {number} [index=-1] - index of parameter(s) to be get\n   * @param {number} [timeout=5000] - timeout for the response\n   * @returns {Promise<(?Object|?Object[])>} - a promise which returns the value(s) of the parameters\n   */\n  async get(params, index=-1, timeout=5000) {\n    let msg = new ParameterReq();\n    msg.recipient = this.name;\n    if (params){\n      if (Array.isArray(params)) {\n        msg.param = params.shift();\n        msg.requests = params.map(p => {return {'param': p};});\n        // Add back for generating a response\n        params.unshift(msg.param);\n      }\n      else msg.param = params;\n    }\n    msg.index = Number.isInteger(index) ? index : -1;\n    const rsp = await this.owner.request(msg, timeout);\n    var ret = Array.isArray(params) ? new Array(params.length).fill(null) : null;\n    if (!rsp || rsp.perf != Performative.INFORM || (params && (!rsp.param))) return ret;\n    // Request for listing of all parameters.\n    if (!params) {\n      if (!rsp.values) rsp.values = {};\n      if (rsp.param) rsp.values[rsp.param] = rsp.value;\n      return rsp.values;\n    } else if (Array.isArray(params)) {\n      if (!rsp.values) rsp.values = {};\n      if (rsp.param) rsp.values[rsp.param] = rsp.value;\n      const rvals = Object.keys(rsp.values);\n      return params.map(p => {\n        let f = rvals.find(rv => rv.endsWith(p));\n        return f ? rsp.values[f] : null;\n      });\n    } else {\n      return rsp.value;\n    }\n  }\n}\n\n/**\n * Base class for messages transmitted by one agent to another. Creates an empty message.\n * @class\n * @param {Message} inReplyTo - message to which this response corresponds to\n * @param {Performative} - performative\n */\nclass Message {\n\n  constructor(inReplyTo={msgID:null, sender:null}, perf='') {\n    this.__clazz__ = 'org.arl.fjage.Message';\n    this.msgID = _guid(8);\n    this.sender = null;\n    this.recipient = inReplyTo.sender;\n    this.perf = perf;\n    this.inReplyTo = inReplyTo.msgID || null;\n  }\n\n  /**\n   * Gets a string representation of the message.\n   *\n   * @returns {string} - string representation\n   */\n  toString() {\n    let s = '';\n    let suffix = '';\n    if (!this.__clazz__) return '';\n    let clazz = this.__clazz__;\n    clazz = clazz.replace(/^.*\\./, '');\n    let perf = this.perf;\n    for (var k in this) {\n      if (k.startsWith('__')) continue;\n      if (k == 'sender') continue;\n      if (k == 'recipient') continue;\n      if (k == 'msgID') continue;\n      if (k == 'perf') continue;\n      if (k == 'inReplyTo') continue;\n      if (typeof this[k] == 'object') {\n        suffix = ' ...';\n        continue;\n      }\n      s += ' ' + k + ':' + this[k];\n    }\n    s += suffix;\n    return clazz+':'+perf+'['+s.replace(/^ /, '')+']';\n  }\n\n  // convert a message into a JSON string\n  // NOTE: we don't do any base64 encoding for TX as\n  //       we don't know what data type is intended\n  /** @private */\n  _serialize() {\n    let clazz = this.__clazz__ || 'org.arl.fjage.Message';\n    let data = JSON.stringify(this, (k,v) => {\n      if (k.startsWith('__')) return;\n      return v;\n    });\n    return '{ \"clazz\": \"'+clazz+'\", \"data\": '+data+' }';\n  }\n\n  // inflate a data dictionary into the message\n  /** @private */\n  _inflate(data) {\n    for (var key in data)\n      this[key] = data[key];\n  }\n\n  // convert a dictionary (usually from decoding JSON) into a message\n  /** @private */\n  static _deserialize(obj) {\n    if (typeof obj == 'string' || obj instanceof String) {\n      try {\n        obj = JSON.parse(obj);\n      }catch(e){\n        return null;\n      }\n    }\n    let qclazz = obj.clazz;\n    let clazz = qclazz.replace(/^.*\\./, '');\n    let rv = MessageClass[clazz] ? new MessageClass[clazz] : new Message();\n    rv.__clazz__ = qclazz;\n    rv._inflate(obj.data);\n    return rv;\n  }\n}\n\n/**\n * A message class that can convey generic messages represented by key-value pairs.\n * @class\n * @extends Message\n */\nclass GenericMessage extends Message {\n  /**\n   * Creates an empty generic message.\n   */\n  constructor() {\n    super();\n    this.__clazz__ = 'org.arl.fjage.GenericMessage';\n  }\n}\n\n/**\n * A gateway for connecting to a fjage master container. The new version of the constructor\n * uses an options object instead of individual parameters. The old version with\n *\n *\n * @class\n * @param {Object} opts\n * @param {string} [opts.hostname=\"localhost\"] - hostname/ip address of the master container to connect to\n * @param {number} [opts.port=1100]          - port number of the master container to connect to\n * @param {string} [opts.pathname=\"\"]        - path of the master container to connect to (for WebSockets)\n * @param {string} [opts.keepAlive=true]     - try to reconnect if the connection is lost\n * @param {number} [opts.queueSize=128]      - size of the queue of received messages that haven't been consumed yet\n * @param {number} [opts.timeout=1000]       - timeout for fjage level messages in ms\n * @param {string} [hostname=\"localhost\"]    - <strike>Deprecated : hostname/ip address of the master container to connect to</strike>\n * @param {number} [port=]                   - <strike>Deprecated : port number of the master container to connect to</strike>\n * @param {string} [pathname==\"/ws/\"]        - <strike>Deprecated : path of the master container to connect to (for WebSockets)</strike>\n * @param {number} [timeout=1000]            - <strike>Deprecated : timeout for fjage level messages in ms</strike>\n */\nclass Gateway {\n\n  constructor(opts = {}, port, pathname='/ws/', timeout=1000) {\n    // Support for deprecated constructor\n    if (typeof opts === 'string' || opts instanceof String){\n      opts = {\n        'hostname': opts,\n        'port' : port || gObj.location.port,\n        'pathname' : pathname,\n        'timeout' : timeout\n      };\n      console.warn('Deprecated use of Gateway constructor');\n    }\n    opts = Object.assign({}, GATEWAY_DEFAULTS, opts);\n    var url = DEFAULT_URL;\n    url.hostname = opts.hostname;\n    url.port = opts.port;\n    url.pathname = opts.pathname;\n    let existing = this._getGWCache(url);\n    if (existing) return existing;\n    this._timeout = opts.timeout;         // timeout for fjage level messages (agentForService etc)\n    this._keepAlive = opts.keepAlive;     // reconnect if connection gets closed/errored\n    this._queueSize = opts.queueSize;      // size of queue\n    this.pending = {};                    // msgid to callback mapping for pending requests to server\n    this.subscriptions = {};              // hashset for all topics that are subscribed\n    this.listener = {};                   // set of callbacks that want to listen to incoming messages\n    this.eventListeners = {};             // external listeners wanting to listen internal events\n    this.queue = [];                      // incoming message queue\n    this.debug = false;                   // debug info to be logged to console?\n    this.aid = new AgentID((isBrowser ? 'WebGW-' : 'NodeGW-')+_guid(4));         // gateway agent name\n    this.connector = this._createConnector(url);\n    this._addGWCache(this);\n  }\n\n  /** @private */\n  _sendEvent(type, val) {\n    if (Array.isArray(this.eventListeners[type])) {\n      this.eventListeners[type].forEach(l => {\n        l && {}.toString.call(l) === '[object Function]' && l(val);\n      });\n    }\n  }\n\n  /** @private */\n  _onMsgRx(data) {\n    var obj;\n    if (this.debug) console.log('< '+data);\n    this._sendEvent('rx', data);\n    try {\n      obj = JSON.parse(data, _decodeBase64);\n    }catch(e){\n      return;\n    }\n    this._sendEvent('rxp', obj);\n    if ('id' in obj && obj.id in this.pending) {\n      // response to a pending request to master\n      this.pending[obj.id](obj);\n      delete this.pending[obj.id];\n    } else if (obj.action == 'send') {\n      // incoming message from master\n      let msg = Message._deserialize(obj.message);\n      if (!msg) return;\n      this._sendEvent('rxmsg', msg);\n      if ((msg.recipient == this.aid.toJSON() )|| this.subscriptions[msg.recipient]) {\n        var consumed = false;\n        if (Array.isArray(this.eventListeners['message'])){\n          for (var i = 0; i < this.eventListeners['message'].length; i++) {\n            if (this.eventListeners['message'][i](msg)) {\n              consumed = true;\n              break;\n            }\n          }\n        }\n        // iterate over internal callbacks, until one consumes the message\n        for (var key in this.listener){\n          // callback returns true if it has consumed the message\n          if (this.listener[key](msg)) {\n            consumed = true;\n            break;\n          }\n        }\n        if(!consumed) {\n          if (this.queue.length >= this._queueSize) this.queue.shift();\n          this.queue.push(msg);\n        }\n      }\n    } else {\n      // respond to standard requests that every container must\n      let rsp = { id: obj.id, inResponseTo: obj.action };\n      switch (obj.action) {\n      case 'agents':\n        rsp.agentIDs = [this.aid.getName()];\n        break;\n      case 'containsAgent':\n        rsp.answer = (obj.agentID == this.aid.getName());\n        break;\n      case 'services':\n        rsp.services = [];\n        break;\n      case 'agentForService':\n        rsp.agentID = '';\n        break;\n      case 'agentsForService':\n        rsp.agentIDs = [];\n        break;\n      default:\n        rsp = undefined;\n      }\n      if (rsp) this._msgTx(rsp);\n    }\n  }\n\n  /** @private */\n  _msgTx(s) {\n    if (typeof s != 'string' && !(s instanceof String)) s = JSON.stringify(s);\n    if(this.debug) console.log('> '+s);\n    this._sendEvent('tx', s);\n    return this.connector.write(s);\n  }\n\n  /** @private */\n  _msgTxRx(rq) {\n    rq.id = _guid(8);\n    return new Promise(resolve => {\n      let timer = setTimeout(() => {\n        delete this.pending[rq.id];\n        if (this.debug) console.log('Receive Timeout : ' + rq);\n        resolve();\n      }, 8*this._timeout);\n      this.pending[rq.id] = rsp => {\n        clearTimeout(timer);\n        resolve(rsp);\n      };\n      if (!this._msgTx.call(this,rq)) {\n        clearTimeout(timer);\n        delete this.pending[rq.id];\n        if (this.debug) console.log('Transmit Timeout : ' + rq);\n        resolve();\n      }\n    });\n  }\n\n  /** @private */\n  _createConnector(url){\n    let conn;\n    if (url.protocol.startsWith('ws')){\n      conn =  new WSConnector({\n        'hostname':url.hostname,\n        'port':url.port,\n        'pathname':url.pathname,\n        'keepAlive': this._keepAlive\n      });\n    }else if (url.protocol.startsWith('tcp')){\n      conn = new TCPconnector({\n        'hostname':url.hostname,\n        'port':url.port,\n        'keepAlive': this._keepAlive\n      });\n    } else return null;\n    conn.setReadCallback(this._onMsgRx.bind(this));\n    conn.addConnectionListener(state => {\n      if (state == true){\n        this.flush();\n        this.connector.write('{\"alive\": true}');\n        this._update_watch();\n      }\n    });\n    return conn;\n  }\n\n  /** @private */\n  _matchMessage(filter, msg){\n    if (typeof filter == 'string' || filter instanceof String) {\n      return 'inReplyTo' in msg && msg.inReplyTo == filter;\n    } else if (Object.prototype.hasOwnProperty.call(filter, 'msgID')) {\n      return 'inReplyTo' in msg && msg.inReplyTo == filter.msgID;\n    } else if (filter.__proto__.name == 'Message' || filter.__proto__.__proto__.name == 'Message') {\n      return filter.__clazz__ == msg.__clazz__;\n    } else if (typeof filter == 'function') {\n      return filter(msg);\n    } else {\n      return msg instanceof filter;\n    }\n  }\n\n  /** @private */\n  _getMessageFromQueue(filter) {\n    if (!this.queue.length) return;\n    if (!filter) return this.queue.shift();\n\n    let matchedMsg = this.queue.find( msg => this._matchMessage(filter, msg));\n    if (matchedMsg) this.queue.splice(this.queue.indexOf(matchedMsg), 1);\n\n    return matchedMsg;\n  }\n\n  /** @private */\n  _getGWCache(url){\n    if (!gObj.fjage || !gObj.fjage.gateways) return null;\n    var f = gObj.fjage.gateways.filter(g => g.connector.url.toString() == url.toString());\n    if (f.length ) return f[0];\n    return null;\n  }\n\n  /** @private */\n  _addGWCache(gw){\n    if (!gObj.fjage || !gObj.fjage.gateways) return;\n    gObj.fjage.gateways.push(gw);\n  }\n\n  /** @private */\n  _removeGWCache(gw){\n    if (!gObj.fjage || !gObj.fjage.gateways) return;\n    var index = gObj.fjage.gateways.indexOf(gw);\n    if (index != null) gObj.fjage.gateways.splice(index,1);\n  }\n\n  /** @private */\n  _update_watch() {\n    // FIXME : Turning off wantsMessagesFor in fjagejs for now as it breaks multiple browser\n    // windows connecting to the same master container.\n    //\n    // let watch = Object.keys(this.subscriptions);\n    // watch.push(this.aid.getName());\n    // let rq = { action: 'wantsMessagesFor', agentIDs: watch };\n    // this._msgTx(rq);\n  }\n\n  /**\n   * Add an event listener to listen to various events happening on this Gateway\n   *\n   * @param {string} type - type of event to be listened to\n   * @param {function} listener - new callback/function to be called when the event happens\n   * @returns {void}\n   */\n  addEventListener(type, listener) {\n    if (!Array.isArray(this.eventListeners[type])){\n      this.eventListeners[type] = [];\n    }\n    this.eventListeners[type].push(listener);\n  }\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {string} type - type of event the listener was for\n   * @param {function} listener - callback/function which was to be called when the event happens\n   * @returns {void}\n   */\n  removeEventListener(type, listener) {\n    if (!this.eventListeners[type]) return;\n    let ndx = this.eventListeners[type].indexOf(listener);\n    if (ndx >= 0) this.eventListeners[type].splice(ndx, 1);\n  }\n\n  /**\n   * Add a new listener to listen to all {Message}s sent to this Gateway\n   *\n   * @param {function} listener - new callback/function to be called when a {Message} is received\n   * @returns {void}\n   */\n  addMessageListener(listener) {\n    this.addEventListener('message',listener);\n  }\n\n  /**\n   * Remove a message listener.\n   *\n   * @param {function} listener - removes a previously registered listener/callback\n   * @returns {void}\n   */\n  removeMessageListener(listener) {\n    this.removeEventListener('message', listener);\n  }\n\n  /**\n   * Add a new listener to get notified when the connection to master is created and terminated.\n   *\n   * @param {function} listener - new callback/function to be called connection to master is created and terminated\n   * @returns {void}\n   */\n  addConnListener(listener) {\n    this.addEventListener('conn', listener);\n  }\n\n  /**\n   * Remove a connection listener.\n   *\n   * @param {function} listener - removes a previously registered listener/callback\n   * @returns {void}\n   */\n  removeConnListener(listener) {\n    this.removeEventListener('conn', listener);\n  }\n\n  /**\n   * Gets the agent ID associated with the gateway.\n   *\n   * @returns {string} - agent ID\n   */\n  getAgentID() {\n    return this.aid;\n  }\n\n  /**\n   * Get an AgentID for a given agent name.\n   *\n   * @param {string} name - name of agent\n   * @returns {AgentID} - AgentID for the given name\n   */\n  agent(name) {\n    return new AgentID(name, false, this);\n  }\n\n  /**\n   * Returns an object representing the named topic.\n   *\n   * @param {string|AgentID} topic - name of the topic or AgentID\n   * @param {string} topic2 - name of the topic if the topic param is an AgentID\n   * @returns {AgentID} - object representing the topic\n   */\n  topic(topic, topic2) {\n    if (typeof topic == 'string' || topic instanceof String) return new AgentID(topic, true, this);\n    if (topic instanceof AgentID) {\n      if (topic.isTopic()) return topic;\n      return new AgentID(topic.getName()+(topic2 ? '__' + topic2 : '')+'__ntf', true, this);\n    }\n  }\n\n  /**\n   * Subscribes the gateway to receive all messages sent to the given topic.\n   *\n   * @param {AgentID} topic - the topic to subscribe to\n   * @returns {boolean} - true if the subscription is successful, false otherwise\n   */\n  subscribe(topic) {\n    if (!topic.isTopic()) topic = new AgentID(topic.getName() + '__ntf', true, this);\n    this.subscriptions[topic.toJSON()] = true;\n    this._update_watch();\n  }\n\n  /**\n   * Unsubscribes the gateway from a given topic.\n   *\n   * @param {AgentID} topic - the topic to unsubscribe\n   * @returns {void}\n   */\n  unsubscribe(topic) {\n    if (!topic.isTopic()) topic = new AgentID(topic.getName() + '__ntf', true, this);\n    delete this.subscriptions[topic.toJSON()];\n    this._update_watch();\n  }\n\n  /**\n   * Finds an agent that provides a named service. If multiple agents are registered\n   * to provide a given service, any of the agents' id may be returned.\n   *\n   * @param {string} service - the named service of interest\n   * @returns {Promise<?AgentID>} - a promise which returns an agent id for an agent that provides the service when resolved\n   */\n  async agentForService(service) {\n    let rq = { action: 'agentForService', service: service };\n    let rsp = await this._msgTxRx(rq);\n    if (!rsp || !rsp.agentID) return;\n    return new AgentID(rsp.agentID, false, this);\n  }\n\n  /**\n   * Finds all agents that provides a named service.\n   *\n   * @param {string} service - the named service of interest\n   * @returns {Promise<?AgentID[]>} - a promise which returns an array of all agent ids that provides the service when resolved\n   */\n  async agentsForService(service) {\n    let rq = { action: 'agentsForService', service: service };\n    let rsp = await this._msgTxRx(rq);\n    let aids = [];\n    if (!rsp || !Array.isArray(rsp.agentIDs)) return aids;\n    for (var i = 0; i < rsp.agentIDs.length; i++)\n      aids.push(new AgentID(rsp.agentIDs[i], false, this));\n    return aids;\n  }\n\n  /**\n   * Sends a message to the recipient indicated in the message. The recipient\n   * may be an agent or a topic.\n   *\n   * @param {Message} msg - message to be sent\n   * @returns {boolean} - if sending was successful\n   */\n  send(msg) {\n    msg.sender = this.aid.toJSON();\n    if (msg.perf == '') {\n      if (msg.__clazz__.endsWith('Req')) msg.perf = Performative.REQUEST;\n      else msg.perf = Performative.INFORM;\n    }\n    this._sendEvent('txmsg', msg);\n    let rq = JSON.stringify({ action: 'send', relay: true, message: '###MSG###' });\n    rq = rq.replace('\"###MSG###\"', msg._serialize());\n    return !!this._msgTx(rq);\n  }\n\n  /**\n   * Flush the Gateway queue for all pending messages. This drops all the pending messages.\n   * @returns {void}\n   *\n   */\n  flush() {\n    this.queue.length = 0;\n  }\n\n  /**\n   * Sends a request and waits for a response. This method returns a {Promise} which resolves when a response\n   * is received or if no response is received after the timeout.\n   *\n   * @param {string} msg - message to send\n   * @param {number} [timeout=1000] - timeout in milliseconds\n   * @returns {Promise<?Message>} - a promise which resolves with the received response message, null on timeout\n   */\n  async request(msg, timeout=1000) {\n    this.send(msg);\n    return this.receive(msg, timeout);\n  }\n\n  /**\n   * Returns a response message received by the gateway. This method returns a {Promise} which resolves when\n   * a response is received or if no response is received after the timeout.\n   *\n   * @param {function} [filter=] - original message to which a response is expected, or a MessageClass of the type\n   * of message to match, or a closure to use to match against the message\n   * @param {number} [timeout=0] - timeout in milliseconds\n   * @returns {Promise<?Message>} - received response message, null on timeout\n   */\n  async receive(filter, timeout=0) {\n    return new Promise(resolve => {\n      let msg = this._getMessageFromQueue.call(this,filter);\n      if (msg) {\n        resolve(msg);\n        return;\n      }\n      if (timeout == 0) {\n        if (this.debug) console.log('Receive Timeout : ' + filter);\n        resolve();\n        return;\n      }\n      let lid = _guid(8);\n      let timer;\n      if (timeout > 0){\n        timer = setTimeout(() => {\n          delete this.listener[lid];\n          if (this.debug) console.log('Receive Timeout : ' + filter);\n          resolve();\n        }, timeout);\n      }\n      this.listener[lid] = msg => {\n        if (!this._matchMessage(filter, msg)) return false;\n        if(timer) clearTimeout(timer);\n        delete this.listener[lid];\n        resolve(msg);\n        return true;\n      };\n    });\n  }\n\n  /**\n   * Closes the gateway. The gateway functionality may not longer be accessed after\n   * this method is called.\n   * @returns {void}\n   */\n  close() {\n    this.connector.close();\n    this._removeGWCache(this);\n  }\n\n}\n\n/**\n * Services supported by fjage agents.\n */\nconst Services = {\n  SHELL : 'org.arl.fjage.shell.Services.SHELL'\n};\n\n/**\n * Creates a unqualified message class based on a fully qualified name.\n * @param {string} name - fully qualified name of the message class to be created\n * @param {class} [parent=Message] - class of the parent MessageClass to inherit from\n * @returns {function} - constructor for the unqualified message class\n * @example\n * const ParameterReq = MessageClass('org.arl.fjage.param.ParameterReq');\n * let pReq = new ParameterReq()\n */\nfunction MessageClass(name, parent=Message) {\n  let sname = name.replace(/^.*\\./, '');\n  if (MessageClass[sname]) return MessageClass[sname];\n  let cls = class extends parent {\n    constructor(params) {\n      super();\n      this.__clazz__ = name;\n      if (params){\n        const keys = Object.keys(params);\n        for (let k of keys) {\n          this[k] = params[k];\n        }\n      }\n    }\n  };\n  cls.__clazz__ = name;\n  MessageClass[sname] = cls;\n  return cls;\n}\n\n////// private utilities\n\n// generate random ID with length 4*len characters\n/** @private */\nfunction _guid(len) {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n  let s = s4();\n  for (var i = 0; i < len-1; i++)\n    s += s4();\n  return s;\n}\n\n// convert from base 64 to array\n/** @private */\nfunction _b64toArray(base64, dtype, littleEndian=true) {\n  let s = gObj.atob(base64);\n  let len = s.length;\n  let bytes = new Uint8Array(len);\n  for (var i = 0; i < len; i++)\n    bytes[i] = s.charCodeAt(i);\n  let rv = [];\n  let view = new DataView(bytes.buffer);\n  switch (dtype) {\n  case '[B': // byte array\n    for (i = 0; i < len; i++)\n      rv.push(view.getUint8(i));\n    break;\n  case '[S': // short array\n    for (i = 0; i < len; i+=2)\n      rv.push(view.getInt16(i, littleEndian));\n    break;\n  case '[I': // integer array\n    for (i = 0; i < len; i+=4)\n      rv.push(view.getInt32(i, littleEndian));\n    break;\n  case '[J': // long array\n    for (i = 0; i < len; i+=8)\n      rv.push(view.getInt64(i, littleEndian));\n    break;\n  case '[F': // float array\n    for (i = 0; i < len; i+=4)\n      rv.push(view.getFloat32(i, littleEndian));\n    break;\n  case '[D': // double array\n    for (i = 0; i < len; i+=8)\n      rv.push(view.getFloat64(i, littleEndian));\n    break;\n  default:\n    return;\n  }\n  return rv;\n}\n\n// base 64 JSON decoder\n/** @private */\nfunction _decodeBase64(k, d) {\n  if (d === null) {\n    return null;\n  }\n  if (typeof d == 'object' && 'clazz' in d) {\n    let clazz = d.clazz;\n    if (clazz.startsWith('[') && clazz.length == 2 && 'data' in d) {\n      let x = _b64toArray(d.data, d.clazz);\n      if (x) d = x;\n    }\n  }\n  return d;\n}\n\n////// global\n\nconst GATEWAY_DEFAULTS = {};\nlet gObj = {};\nlet DEFAULT_URL;\nif (isBrowser || isWebWorker){\n  gObj = window;\n  Object.assign(GATEWAY_DEFAULTS, {\n    'hostname': gObj.location.hostname,\n    'port': gObj.location.port,\n    'pathname' : '/ws/',\n    'timeout': 1000,\n    'keepAlive' : true,\n    'queueSize': DEFAULT_QUEUE_SIZE\n  });\n  DEFAULT_URL = new URL('ws://localhost');\n  // Enable caching of Gateways\n  if (typeof gObj.fjage === 'undefined') gObj.fjage = {};\n  if (typeof gObj.fjage.gateways == 'undefined')gObj.fjage.gateways = [];\n} else if (isJsDom || isNode){\n  gObj = global;\n  Object.assign(GATEWAY_DEFAULTS, {\n    'hostname': 'localhost',\n    'port': '1100',\n    'pathname': '',\n    'timeout': 1000,\n    'keepAlive' : true,\n    'queueSize': DEFAULT_QUEUE_SIZE\n  });\n  DEFAULT_URL = new URL('tcp://localhost');\n  gObj.atob = a => Buffer.from(a, 'base64').toString('binary');\n}\n\nconst ParameterReq = MessageClass('org.arl.fjage.param.ParameterReq');\n\nexport { AgentID, Gateway, GenericMessage, Message, MessageClass, Performative, Services };\n","import {AgentID, MessageClass, Services, Gateway} from 'fjage';\n\nconst DatagramReq = MessageClass('org.arl.unet.DatagramReq');\nconst DatagramNtf = MessageClass('org.arl.unet.DatagramNtf');\nconst BasebandSignal = MessageClass('org.arl.unet.bb.BasebandSignal');\n\nlet UnetServices = {\n  'NODE_INFO': 'org.arl.unet.Services.NODE_INFO',\n  'ADDRESS_RESOLUTION': 'org.arl.unet.Services.ADDRESS_RESOLUTION',\n  'DATAGRAM': 'org.arl.unet.Services.DATAGRAM',\n  'PHYSICAL': 'org.arl.unet.Services.PHYSICAL',\n  'RANGING': 'org.arl.unet.Services.RANGING',\n  'BASEBAND': 'org.arl.unet.Services.BASEBAND',\n  'LINK': 'org.arl.unet.Services.LINK',\n  'MAC': 'org.arl.unet.Services.MAC',\n  'ROUTING': 'org.arl.unet.Services.ROUTING',\n  'ROUTE_MAINTENANCE': 'org.arl.unet.Services.ROUTE_MAINTENANCE',\n  'TRANSPORT': 'org.arl.unet.Services.TRANSPORT',\n  'REMOTE': 'org.arl.unet.Services.REMOTE',\n  'STATE_MANAGER': 'org.arl.unet.Services.STATE_MANAGER',\n  'DEVICE_INFO': 'org.arl.unet.Services.DEVICE_INFO',\n  'DOA': 'org.arl.unet.Services.DOA'\n};\n\nObject.assign(Services, UnetServices);\n\n/**\n * Well-known protocol number assignments used in UnetStack\n * @typedef {Object.<string, number>} Protocol\n */\nlet Protocol = {\n  'DATA' : 0,               // Protocol number for user application data.\n  'RANGING' : 1,            // Protocol number for use by ranging agents.\n  'LINK' : 2,               // Protocol number for use by link agents.\n  'REMOTE' : 3,             // Protocol number for use by remote management agents.\n  'MAC' : 4,                // Protocol number for use by MAC protocol agents.\n  'ROUTING' : 5,            // Protocol number for use by routing agents.\n  'TRANSPORT' : 6,          // Protocol number for use by transport agents.\n  'ROUTE_MAINTENANCE' : 7,   // Protocol number for use by route maintenance agents.\n  'LINK2' : 8,              // Protocol number for use by secondary link agents.\n  'USER' : 32,              // Lowest protocol number allowable for user protocols.\n  'MAX' : 63,               // Largest protocol number allowable.\n};\n\n/**\n * Well-known protocol Messages used in UnetStack\n * @typedef {Object.<string, MessageClass>} UnetMessages\n */\nlet UnetMessages = {\n  // unet\n  'TestReportNtf'          : MessageClass('org.arl.unet.TestReportNtf'),\n  'AbnormalTerminationNtf' : MessageClass('org.arl.unet.AbnormalTerminationNtf'),\n  'CapabilityListRsp'      : MessageClass('org.arl.unet.CapabilityListRsp'),\n  'CapabilityReq'          : MessageClass('org.arl.unet.CapabilityReq'),\n  'ClearReq'               : MessageClass('org.arl.unet.ClearReq'),\n  'DatagramCancelReq'      : MessageClass('org.arl.unet.DatagramCancelReq'),\n  'DatagramDeliveryNtf'    : MessageClass('org.arl.unet.DatagramDeliveryNtf'),\n  'DatagramFailureNtf'     : MessageClass('org.arl.unet.DatagramFailureNtf'),\n  'DatagramNtf'            : MessageClass('org.arl.unet.DatagramNtf'),\n  'DatagramProgressNtf'    : MessageClass('org.arl.unet.DatagramProgressNtf'),\n  'DatagramReq'            : MessageClass('org.arl.unet.DatagramReq'),\n  'ParamChangeNtf'         : MessageClass('org.arl.unet.ParamChangeNtf'),\n  'RefuseRsp'              : MessageClass('org.arl.unet.RefuseRsp'),\n  'FailureNtf'             : MessageClass('org.arl.unet.FailureNtf'),\n\n  // net\n  'DatagramTraceReq'       : MessageClass('org.arl.unet.net.DatagramTraceReq'),\n  'RouteDiscoveryReq'      : MessageClass('org.arl.unet.net.RouteDiscoveryReq'),\n  'RouteTraceReq'          : MessageClass('org.arl.unet.net.RouteTraceReq'),\n  'RouteDiscoveryNtf'      : MessageClass('org.arl.unet.net.RouteDiscoveryNtf'),\n  'RouteTraceNtf'          : MessageClass('org.arl.unet.net.RouteTraceNtf'),\n\n  // phy\n  'FecDecodeReq'           : MessageClass('org.arl.unet.phy.FecDecodeReq'),\n  'RxJanusFrameNtf'        : MessageClass('org.arl.unet.phy.RxJanusFrameNtf'),\n  'TxJanusFrameReq'        : MessageClass('org.arl.unet.phy.TxJanusFrameReq'),\n  'BadFrameNtf'            : MessageClass('org.arl.unet.phy.BadFrameNtf'),\n  'BadRangeNtf'            : MessageClass('org.arl.unet.phy.BadRangeNtf'),\n  'ClearSyncReq'           : MessageClass('org.arl.unet.phy.ClearSyncReq'),\n  'CollisionNtf'           : MessageClass('org.arl.unet.phy.CollisionNtf'),\n  'RxFrameNtf'             : MessageClass('org.arl.unet.phy.RxFrameNtf', DatagramNtf),\n  'RxFrameStartNtf'        : MessageClass('org.arl.unet.phy.RxFrameStartNtf'),\n  'SyncInfoReq'            : MessageClass('org.arl.unet.phy.SyncInfoReq'),\n  'SyncInfoRsp'            : MessageClass('org.arl.unet.phy.SyncInfoRsp'),\n  'TxFrameNtf'             : MessageClass('org.arl.unet.phy.TxFrameNtf'),\n  'TxFrameReq'             : MessageClass('org.arl.unet.phy.TxFrameReq', DatagramReq),\n  'TxFrameStartNtf'        : MessageClass('org.arl.unet.phy.TxFrameStartNtf'),\n  'TxRawFrameReq'          : MessageClass('org.arl.unet.phy.TxRawFrameReq'),\n\n  // addr\n  'AddressAllocReq'        : MessageClass('org.arl.unet.addr.AddressAllocReq'),\n  'AddressAllocRsp'        : MessageClass('org.arl.unet.addr.AddressAllocRsp'),\n  'AddressResolutionReq'   : MessageClass('org.arl.unet.addr.AddressResolutionReq'),\n  'AddressResolutionRsp'   : MessageClass('org.arl.unet.addr.AddressResolutionRsp'),\n\n  // bb\n  'BasebandSignal'         : MessageClass('org.arl.unet.bb.BasebandSignal'),\n  'RecordBasebandSignalReq' : MessageClass('org.arl.unet.bb.RecordBasebandSignalReq'),\n  'RxBasebandSignalNtf'    : MessageClass('org.arl.unet.bb.RxBasebandSignalNtf', BasebandSignal),\n  'TxBasebandSignalReq'    : MessageClass('org.arl.unet.bb.TxBasebandSignalReq', BasebandSignal),\n\n  // link\n  'LinkStatusNtf'          : MessageClass('org.arl.unet.link.LinkStatusNtf'),\n\n  // localization\n  'RangeNtf'               : MessageClass('org.arl.unet.localization.RangeNtf'),\n  'RangeReq'               : MessageClass('org.arl.unet.localization.RangeReq'),\n  'BeaconReq'              : MessageClass('org.arl.unet.localization.BeaconReq'),\n  'RespondReq'             : MessageClass('org.arl.unet.localization.RespondReq'),\n  'InterrogationNtf'       : MessageClass('org.arl.unet.localization.InterrogationNtf'),\n\n\n  // mac\n  'ReservationAcceptReq'   : MessageClass('org.arl.unet.mac.ReservationAcceptReq'),\n  'ReservationCancelReq'   : MessageClass('org.arl.unet.mac.ReservationCancelReq'),\n  'ReservationReq'         : MessageClass('org.arl.unet.mac.ReservationReq'),\n  'ReservationRsp'         : MessageClass('org.arl.unet.mac.ReservationRsp'),\n  'ReservationStatusNtf'   : MessageClass('org.arl.unet.mac.ReservationStatusNtf'),\n  'RxAckNtf'               : MessageClass('org.arl.unet.mac.RxAckNtf'),\n  'TxAckReq'               : MessageClass('org.arl.unet.mac.TxAckReq'),\n\n\n  // remote\n  'RemoteExecReq'          : MessageClass('org.arl.unet.remote.RemoteExecReq'),\n  'RemoteFailureNtf'       : MessageClass('org.arl.unet.remote.RemoteFailureNtf'),\n  'RemoteFileGetReq'       : MessageClass('org.arl.unet.remote.RemoteFileGetReq'),\n  'RemoteFileNtf'          : MessageClass('org.arl.unet.remote.RemoteFileNtf'),\n  'RemoteFilePutReq'       : MessageClass('org.arl.unet.remote.RemoteFilePutReq'),\n  'RemoteSuccessNtf'       : MessageClass('org.arl.unet.remote.RemoteSuccessNtf'),\n  'RemoteTextNtf'          : MessageClass('org.arl.unet.remote.RemoteTextNtf'),\n  'RemoteTextReq'          : MessageClass('org.arl.unet.remote.RemoteTextReq'),\n\n  // scheduler\n  'AddScheduledSleepReq'   : MessageClass('org.arl.unet.scheduler.AddScheduledSleepReq'),\n  'GetSleepScheduleReq'    : MessageClass('org.arl.unet.scheduler.GetSleepScheduleReq'),\n  'RemoveScheduledSleepReq' : MessageClass('org.arl.unet.scheduler.RemoveScheduledSleepReq'),\n  'SleepScheduleRsp'       : MessageClass('org.arl.unet.scheduler.SleepScheduleRsp'),\n  'WakeFromSleepNtf'       : MessageClass('org.arl.unet.scheduler.WakeFromSleepNtf'),\n\n  // state\n  'ClearStateReq'          : MessageClass('org.arl.unet.state.ClearStateReq'),\n  'SaveStateReq'           : MessageClass('org.arl.unet.state.SaveStateReq')\n};\n\n/**\n  * Convert coordinates from a local coordinates to GPS coordinate\n  * @param {Array} origin - Local coordinate system's origin as `[latitude, longitude]`\n  * @param {Number} x - X coordinate of the local coordinate to be converted\n  * @param {Number} y - Y coordinate of the local coordinate to be converted\n  * @returns {Array} - GPS coordinates (in decimal degrees) as `[latitude, longitude]`\n  */\n\nexport function toGps(origin, x, y) {\n  let coords = [] ;\n  let [xScale,yScale] = _initConv(origin[0]);\n  coords[1] = x/xScale + origin[1];\n  coords[0] = y/yScale + origin[0];\n  return coords;\n}\n\n/**\n  * Convert coordinates from a GPS coordinates to local coordinate\n  * @param {Array} origin - Local coordinate system's origin as `[latitude, longitude]`\n  * @param {Number} lat - Latitude of the GPS coordinate to be converted\n  * @param {Number} lon - Longitude of the GPS coordinate to be converted\n  * @returns {Array} - GPS coordinates (in decimal degrees) as `[latitude, longitude]`\n  */\nexport function toLocal(origin, lat, lon) {\n  let pos = [];\n  let [xScale,yScale] = _initConv(origin[0]);\n  pos[0] = (lon-origin[1]) * xScale;\n  pos[1] = (lat-origin[0]) * yScale;\n  return pos;\n}\n\nfunction _initConv(lat){\n  let rlat = lat * Math.PI/180;\n  let yScale = 111132.92 - 559.82*Math.cos(2*rlat) + 1.175*Math.cos(4*rlat) - 0.0023*Math.cos(6*rlat);\n  let xScale = 111412.84*Math.cos(rlat) - 93.5*Math.cos(3*rlat) + 0.118*Math.cos(5*rlat);\n  return [xScale, yScale];\n}\n\n/**\n * A message which requests the transmission of the datagram from the Unet\n *\n * @typedef {Message} DatagramReq\n * @property {number[]} data - data as an Array of bytes\n * @property {number} from - from/source node address\n * @property {number} to - to/destination node address\n * @property {number} protocol - protocol number to be used to send this Datagram\n * @property {boolean} reliability - true if Datagram should be reliable, false if unreliable\n * @property {number} ttl - time-to-live for the datagram. Time-to-live is advisory, and an agent may choose it ignore it\n */\n\n/**\n * Notification of received datagram message received by the Unet node.\n *\n * @typedef {Message} DatagramNtf\n * @property {number[]} data - data as an Array of bytes\n * @property {number} from - from/source node address\n * @property {number} to - to/destination node address\n * @property {number} protocol - protocol number to be used to send this Datagram\n * @property {number} ttl - time-to-live for the datagram. Time-to-live is advisory, and an agent may choose it ignore it\n */\n\n/**\n * An identifier for an agent or a topic.\n * @external AgentID\n * @see {@link https://org-arl.github.io/fjage/jsdoc/|fjåge.js Documentation}\n */\n\n/**\n * Services supported by fjage agents.\n * @external Services\n * @see {@link https://org-arl.github.io/fjage/jsdoc/|fjåge.js Documentation}\n */\n\n/**\n *  An action represented by a message.\n * @external Performative\n * @see {@link https://org-arl.github.io/fjage/jsdoc/|fjåge.js Documentation}\n */\n\n/**\n * Function to creates a unqualified message class based on a fully qualified name.\n * @external MessageClass\n * @see {@link https://org-arl.github.io/fjage/jsdoc/|fjåge.js Documentation}\n */\n\n/**\n * A caching CachingAgentID which caches Agent parameters locally.\n *\n * @class\n * @extends AgentID\n * @param {string | AgentID} name - name of the agent or an AgentID to copy\n * @param {boolean} topic - name of topic\n * @param {Gateway} owner - Gateway owner for this AgentID\n * @param {Boolean} [greedy=true] - greedily fetches and caches all parameters if this Agent\n *\n*/\nclass CachingAgentID extends AgentID {\n\n  constructor(name, topic, owner, greedy=true) {\n    if (name instanceof AgentID) {\n      super(name.getName(), name.topic, name.owner);\n    } else {\n      super(name, topic, owner);\n    }\n    this.greedy = greedy;\n    this.cache = {};\n    this.specialParams = ['name', 'version'];\n  }\n\n  /**\n   * Sets parameter(s) on the Agent referred to by this AgentID, and caches the parameter(s).\n   *\n   * @param {(string|string[])} params - parameters name(s) to be set\n   * @param {(Object|Object[])} values - parameters value(s) to be set\n   * @param {number} [index=-1] - index of parameter(s) to be set\n   * @param {number} [timeout=5000] - timeout for the response\n   * @returns {Promise<(Object|Object[])>} - a promise which returns the new value(s) of the parameters\n   */\n  async set(params, values, index=-1, timeout=5000) {\n    let s = await super.set(params, values, index, timeout);\n    this._updateCache(params, s, index);\n    return s;\n  }\n\n  /**\n   * Gets parameter(s) on the Agent referred to by this AgentID, getting them from the cache if possible.\n   *\n   * @param {(string|string[])} params - parameters name(s) to be fetched\n   * @param {number} [index=-1] - index of parameter(s) to be fetched\n   * @param {number} [timeout=5000] - timeout for the response\n   * @param {number} [maxage=5000] - maximum age of the cached result to retreive\n   * @returns {Promise<(Object|Object[])>} - a promise which returns the value(s) of the parameters\n   */\n  async get(params, index=-1, timeout=5000, maxage=5000) {\n    if (this._isCached(params, index, maxage)) return this._getCache(params, index);\n    if (this.greedy &&\n      !(Array.isArray(params) && [...new Set([...params, ...this.specialParams])].length!=0) &&\n      !this.specialParams.includes(params)) {\n      let rsp = await super.get(null, index, timeout);\n      this._updateCache(null, rsp, index);\n      if (!rsp) return Array.isArray(params) ? new Array(params.length).fill(null) : null;\n      if (!params) return rsp;\n      else if (Array.isArray(params)) {\n        return params.map(p => {\n          let f = Object.keys(rsp).find(rv => this._toNamed(rv) === p);\n          return f ? rsp[f] : null;\n        });\n      } else {\n        let f = Object.keys(rsp).find(rv => this._toNamed(rv) === params);\n        return f ? rsp[f] : null;\n      }\n    } else{\n      let r = await super.get(params, index, timeout);\n      this._updateCache(params, r, index);\n      return r;\n    }\n  }\n\n  _updateCache(params, vals, index) {\n    if (vals == null || Array.isArray(vals) && vals.every(v => v == null)) return;\n    if (params == null) {\n      params = Object.keys(vals);\n      vals = Object.values(vals);\n    } else if (!Array.isArray(params)) params = [params];\n    if (!Array.isArray(vals)) vals = [vals];\n    params = params.map(this._toNamed);\n    if (this.cache[index.toString()] === undefined) this.cache[index.toString()] = {};\n    let c = this.cache[index.toString()];\n    for (let i = 0; i < params.length; i++) {\n      if (c[params[i]] === undefined) c[params[i]] = {};\n      c[params[i]].value = vals[i];\n      c[params[i]].ctime = Date.now();\n    }\n  }\n\n  _isCached(params, index, maxage) {\n    if (maxage <= 0) return false;\n    if (params == null) return false;\n    let c = this.cache[index.toString()];\n    if (!c) {\n      return false;\n    }\n    if (!Array.isArray(params)) params = [params];\n    const rv = params.every(p => {\n      p = this._toNamed(p);\n      return (p in c) && (Date.now() - c[p].ctime <= maxage);\n    });\n    return rv;\n  }\n\n  _getCache(params, index) {\n    let c = this.cache[index.toString()];\n    if (!c) return null;\n    if (!Array.isArray(params)){\n      if (params in c) return c[params].value;\n      return null;\n    }else {\n      return params.map(p => p in c ? c[p].value : null);\n    }\n  }\n\n  _toNamed(param) {\n    const idx = param.lastIndexOf('.');\n    if (idx < 0) return param;\n    else return param.slice(idx+1);\n  }\n\n}\n\n\nclass CachingGateway extends Gateway{\n\n  /**\n   * Get an AgentID for a given agent name.\n   *\n   * @param {string} name - name of agent\n   * @param {Boolean} [caching=true] - if the AgentID should cache parameters\n   * @param {Boolean} [greedy=true] - greedily fetches and caches all parameters if this Agent\n   * @returns {AgentID|CachingAgentID} - AgentID for the given name\n   */\n  agent(name, caching=true, greedy=true) {\n    const aid = super.agent(name);\n    return caching ? new CachingAgentID(aid, null, null, greedy) : aid;\n  }\n\n  /**\n   * Returns an object representing the named topic.\n   *\n   * @param {string|AgentID} topic - name of the topic or AgentID\n   * @param {string} topic2 - name of the topic if the topic param is an AgentID\n   * @param {Boolean} [caching=true] - if the AgentID should cache parameters\n   * @param {Boolean} [greedy=true] - greedily fetches and caches all parameters if this Agent\n   * @returns {AgentID|CachingAgentID} - object representing the topic\n   */\n  topic(topic, topic2, caching=true, greedy=true) {\n    const aid = super.topic(topic, topic2);\n    return caching ? new CachingAgentID(aid, null, null, greedy) : aid;\n  }\n\n  /**\n   * Finds an agent that provides a named service. If multiple agents are registered\n   * to provide a given service, any of the agents' id may be returned.\n   *\n   * @param {string} service - the named service of interest\n   * @param {Boolean} [caching=true] - if the AgentID should cache parameters\n   * @param {Boolean} [greedy=true] - greedily fetches and caches all parameters if this Agent\n   * @returns {Promise<?AgentID|CachingAgentID>} - a promise which returns an agent id for an agent that provides the service when resolved\n   */\n  async agentForService(service, caching=true, greedy=true) {\n    const aid = await super.agentForService(service);\n    if (!aid) return aid;\n    return caching ? new CachingAgentID(aid, null, null, greedy) : aid;\n  }\n\n  /**\n   * Finds all agents that provides a named service.\n   *\n   * @param {string} service - the named service of interest\n   * @param {Boolean} [caching=true] - if the AgentID should cache parameters\n   * @param {Boolean} [greedy=true] - greedily fetches and caches all parameters if this Agent\n   * @returns {Promise<?AgentID|CachingAgentID[]>} - a promise which returns an array of all agent ids that provides the service when resolved\n   */\n  async agentsForService(service, caching=true, greedy=true) {\n    const aids = await super.agentsForService(service);\n    return caching ? aids.map(a => new CachingAgentID(a, null, null, greedy)) : aids;\n  }\n}\n\nexport {AgentID, Services, UnetMessages, Protocol, CachingGateway as Gateway, CachingAgentID};\n","import {Performative} from 'fjage';\nimport {Gateway, Services, UnetMessages, Protocol} from './unetutils';\n\nconst REQUEST_TIMEOUT = 1000;\n\nconst AddressResolutionReq = UnetMessages.AddressResolutionReq;\nconst DatagramReq = UnetMessages.DatagramReq;\nconst DatagramNtf = UnetMessages.DatagramNtf;\nconst RxFrameNtf = UnetMessages.RxFrameNtf;\n\n/**\n * Creates a new UnetSocket to connect to a running Unet instance. This constructor returns a\n * {@link Promise} instead of the constructed UnetSocket object. Use `await` or `.then()` to get\n * a reference to the UnetSocket object. Based on if this is run in a Browser or Node.js,\n * it will internally connect over WebSockets or TCP respectively.\n *\n *\n * @class UnetSocket\n * @param {string} [hostname] - hostname/ip address of the master container to connect to\n * @param {number} [port] - port number of the master container to connect to\n * @param {string} [path='']  - path of the master container to connect to (for WebSockets)\n * @returns {Promise<UnetSocket>} - Promise which resolves to the UnetSocket object being constructed\n *\n * @example\n * let socket = await new UnetSocket('localhost', 8081, '/ws/');\n */\nexport default class UnetSocket {\n\n  constructor(hostname, port, path='') {\n    return (async () => {\n      this.gw = new Gateway({\n        hostname : hostname,\n        port : port,\n        path : path\n      });\n      this.localProtocol = -1;\n      this.remoteAddress = -1;\n      this.remoteProtocol = Protocol.DATA;\n      this.timeout = 0;\n      this.provider = null;\n      const alist = await this.gw.agentsForService(Services.DATAGRAM);\n      alist.forEach(a => {this.gw.subscribe(this.gw.topic(a));});\n      return this;\n    })();\n  }\n\n  /**\n   * Closes the socket. The socket functionality may not longer be accessed after this method is called.\n   * @returns {void}\n   */\n  close() {\n    this.gw.close();\n    this.gw = null;\n  }\n\n  /**\n   * Checks if a socket is closed.\n   * @returns {boolean} - true if closed, false if open\n   */\n  isClosed() {\n    return this.gw == null;\n  }\n\n  /**\n   * Binds a socket to listen to a specific protocol datagrams.\n   * Protocol numbers between Protocol.DATA+1 to Protocol.USER-1 are reserved protocols\n   * and cannot be bound. Unbound sockets listen to all unreserved\n   * @param {Protocol} protocol - protocol number to listen for\n   * @returns {boolean} - true on success, false on failure\n   */\n  bind(protocol) {\n    if (protocol == Protocol.DATA || (protocol >= Protocol.USER && protocol <= Protocol.MAX)) {\n      this.localProtocol = protocol;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Unbinds a socket so that it listens to all unreserved protocols.\n   * Protocol numbers between Protocol.DATA+1 to Protocol.USER-1 are considered reserved.\n   * @returns {void}\n   */\n  unbind() { this.localProtocol = -1;}\n\n  /**\n   * Checks if a socket is bound.\n   * @returns {boolean} - true if bound to a protocol, false if unbound\n   */\n  isBound() { return this.localProtocol >= 0;}\n\n  /**\n   * Sets the default destination address and destination protocol number for datagrams sent\n   * using this socket. The defaults can be overridden for specific send() calls.\n   * The default protcol number when a socket is opened is Protcol.DATA.\n   * The default node address is undefined.\n   * Protocol numbers between Protocol.DATA+1 to Protocol.USER-1 are considered reserved,\n   * and cannot be used for sending datagrams using the socket.\n   *\n   * @param {number} to - default destination node address\n   * @param {Protocol} protocol - default protocol number\n   * @returns {boolean} - true on success, false on failure\n   */\n  connect(to, protocol) {\n    if (to >= 0 && (protocol == Protocol.DATA || (protocol >= Protocol.USER && protocol <= Protocol.MAX))) {\n      this.remoteAddress = to;\n      this.remoteProtocol = protocol;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Resets the default destination address to undefined, and the default protocol number\n   * to Protocol.DATA.\n   * @returns {void}\n   */\n  disconnect() {\n    this.remoteAddress = -1;\n    this.remoteProtocol = 0;\n  }\n\n  /**\n   * Checks if a socket is connected, i.e., has a default destination address and protocol number.\n   * @returns {boolean} - true if connected, false otherwise\n   */\n  isConnected() { return this.remoteAddress >= 0; }\n\n  /**\n   * Gets the local node address of the Unet node connected to.\n   * @returns {Promise<int>} - local node address, or -1 on error\n   */\n  async getLocalAddress() {\n    if (this.gw == null) return -1;\n    const nodeinfo = await this.gw.agentForService(Services.NODE_INFO);\n    if (nodeinfo == null) return -1;\n    const addr = await nodeinfo.get('address');\n    return addr != null ? addr : -1;\n  }\n\n  /**\n   * Gets the protocol number that the socket is bound to.\n   * @returns {number}} - protocol number if socket is bound, -1 otherwise\n   */\n  getLocalProtocol() { return this.localProtocol; }\n\n  /**\n   * Gets the default destination node address for a connected socket.\n   * @returns {number}} - default destination node address if connected, -1 otherwise\n   */\n  getRemoteAddress() { return this.remoteAddress; }\n\n  /**\n   * Gets the default transmission protocol number.\n   * @returns {number}} - default protocol number used to transmit a datagram\n   */\n  getRemoteProtocol() { return this.remoteProtocol; }\n\n  /**\n   * Sets the timeout for datagram reception. A timeout of 0 means the\n   * {@link UnetSocket#receive|receive method} will check any appropriate\n   * Datagram has already been received (and is cached) else return immediately.\n   *\n   * @param {number} ms - timeout in milliseconds\n   * @returns {void}\n   */\n  setTimeout(ms) {\n    if (ms < 0) ms = 0;\n    this.timeout = ms;\n  }\n\n  /**\n   * Gets the timeout for datagram reception.\n   * @returns {number} - timeout in milliseconds\n   */\n  getTimeout() { return this.timeout; }\n\n  /**\n   * Transmits a datagram to the specified node address using the specified protocol.\n   * Protocol numbers between Protocol.DATA+1 to Protocol.USER-1 are considered reserved,\n   * and cannot be used for sending datagrams using the socket.\n   * @param {number[]|DatagramReq} data - data to be sent over the socket as an Array of bytes or DatagramReq\n   * @param {number} to - destination node address\n   * @param {number} protocol - protocol number\n   * @returns {Promise<boolean>} - true if the Unet node agreed to send out the Datagram, false otherwise\n   */\n  async send(data, to=this.remoteAddress, protocol=this.remoteProtocol) {\n    if (to < 0 || this.gw == null) return false;\n    var req;\n    if (Array.isArray(data)){\n      req = new DatagramReq();\n      req.data = data;\n      req.to = to;\n      req.protocol = protocol;\n    } else if (data instanceof DatagramReq){\n      req = data;\n    } else {\n      return false;\n    }\n    let p = req.protocol;\n    if (p != Protocol.DATA && (p < Protocol.USER || p > Protocol.MAX)) return false;\n    if (req.recipient == null) {\n      if (this.provider == null) this.provider = await this.gw.agentForService(Services.TRANSPORT);\n      if (this.provider == null) this.provider = await this.gw.agentForService(Services.ROUTING);\n      if (this.provider == null) this.provider = await this.gw.agentForService(Services.LINK);\n      if (this.provider == null) this.provider = await this.gw.agentForService(Services.PHYSICAL);\n      if (this.provider == null) this.provider = await this.gw.agentForService(Services.DATAGRAM);\n      if (this.provider == null) return false;\n      req.recipient = this.provider;\n    }\n    const rsp = await this.gw.request(req, REQUEST_TIMEOUT);\n    return (rsp != null && rsp.perf == Performative.AGREE);\n  }\n\n  /**\n   * Receives a datagram sent to the local node and the bound protocol number. If the socket is unbound,\n   * then datagrams with all unreserved protocols are received. Any broadcast datagrams are also received.\n   *\n   * @returns {Promise<?DatagramNtf>} - datagram received by the socket\n   */\n  async receive() {\n    if (this.gw == null) return null;\n    return await this.gw.receive(msg => {\n      if (msg.__clazz__ != DatagramNtf.__clazz__ && msg.__clazz__ != RxFrameNtf.__clazz__ ) return false;\n      let p = msg.protocol;\n      if (p == Protocol.DATA || p >= Protocol.USER) {\n        return this.localProtocol < 0 || this.localProtocol == p;\n      }\n      return false;\n    }, this.timeout);\n  }\n\n  /**\n   * Gets a Gateway to provide low-level access to UnetStack.\n   * @returns {Gateway} - underlying fjage Gateway supporting this socket\n   */\n  getGateway() { return this.gw; }\n\n  /**\n   * Gets an AgentID providing a specified service for low-level access to UnetStack\n   * @param {string} svc - the named service of interest\n   * @param {Boolean} caching - if the AgentID should cache parameters\n   * @returns {Promise<?AgentID>} - a promise which returns an {@link AgentID} that provides the service when resolved\n   */\n  async agentForService(svc, caching=true) {\n    if (this.gw == null) return null;\n    return await this.gw.agentForService(svc, caching);\n  }\n\n  /**\n   *\n   * @param {string} svc - the named service of interest\n   * @param {Boolean} caching - if the AgentID should cache parameters\n   * @returns {Promise<AgentID[]>} - a promise which returns an array of {@link AgentID|AgentIDs} that provides the service when resolved\n   */\n  async agentsForService(svc, caching=true) {\n    if (this.gw == null) return null;\n    return await this.gw.agentsForService(svc, caching``);\n  }\n\n  /**\n   * Gets a named AgentID for low-level access to UnetStack.\n   * @param {string} name - name of agent\n   * @param {Boolean} caching - if the AgentID should cache parameters\n   * @returns {AgentID} - AgentID for the given name\n   */\n  agent(name, caching=true) {\n    if (this.gw == null) return null;\n    return this.gw.agent(name, caching);\n  }\n\n  /**\n   * Resolve node name to node address.\n   * @param {string} nodeName - name of the node to resolve\n   * @returns {Promise<?number>} - address of the node, or null if unable to resolve\n   */\n  async host(nodeName) {\n    const arp = await this.agentForService(Services.ADDRESS_RESOLUTION);\n    if (arp == null) return null;\n    const req = new AddressResolutionReq(nodeName);\n    req.name = nodeName;\n    req.recipient = arp;\n    const rsp = await this.gw.request(req, REQUEST_TIMEOUT);\n    if (rsp == null || ! Object.prototype.hasOwnProperty.call(rsp, 'address')) return null;\n    return rsp.address;\n  }\n}"],"names":["isBrowser","window","document","isNode","process","versions","node","isWebWorker","self","constructor","name","isJsDom","navigator","userAgent","includes","Deno","core","SOCKET_OPEN","SOCKET_OPENING","createConnection","TCPconnector","opts","this","url","URL","host","hostname","port","_buf","pendingOnOpen","connListeners","_sockInit","_sendConnEvent","val","forEach","l","toString","call","_sockSetup","import","then","module","error","debug","console","log","sock","setEncoding","on","_onSockOpen","bind","_sockReconnect","send","data","write","_firstConn","keepAlive","readyState","_firstReConn","remoteAddress","remotePort","setTimeout","_reconnectTime","_processSockData","cb","length","s","lines","split","idx","_onSockRx","push","setReadCallback","addConnectionListener","listener","removeConnectionListener","ndx","indexOf","splice","close","onclose","destroy","WSConnector","pathname","reconnectTime","_keepAlive","_websockSetup","WebSocket","onerror","_websockReconnect","onopen","_onWebsockOpen","CONNECTING","OPEN","onmessage","event","_onWebsockRx","Performative","REQUEST","AGREE","REFUSE","FAILURE","INFORM","CONFIRM","DISCONFIRM","QUERY_IF","NOT_UNDERSTOOD","CFP","PROPOSE","CANCEL","AgentID","topic","owner","getName","isTopic","msg","recipient","toJSON","async","timeout","request","connector","params","values","index","ParameterReq","Array","isArray","param","shift","value","requests","map","p","i","unshift","Number","isInteger","rsp","ret","fill","perf","rvals","Object","keys","f","find","rv","endsWith","Message","inReplyTo","msgID","sender","__clazz__","_guid","suffix","clazz","replace","k","startsWith","_serialize","JSON","stringify","v","_inflate","key","static","obj","String","parse","e","qclazz","MessageClass","Services","SHELL","parent","sname","cls","super","len","s4","Math","floor","random","substring","_decodeBase64","d","x","base64","dtype","littleEndian","gObj","atob","bytes","Uint8Array","charCodeAt","view","DataView","buffer","getUint8","getInt16","getInt32","getInt64","getFloat32","getFloat64","_b64toArray","GATEWAY_DEFAULTS","DEFAULT_URL","assign","location","queueSize","fjage","gateways","global","a","Buffer","from","DatagramReq","DatagramNtf","BasebandSignal","NODE_INFO","ADDRESS_RESOLUTION","DATAGRAM","PHYSICAL","RANGING","BASEBAND","LINK","MAC","ROUTING","ROUTE_MAINTENANCE","TRANSPORT","REMOTE","STATE_MANAGER","DEVICE_INFO","DOA","Protocol","DATA","LINK2","USER","MAX","UnetMessages","TestReportNtf","AbnormalTerminationNtf","CapabilityListRsp","CapabilityReq","ClearReq","DatagramCancelReq","DatagramDeliveryNtf","DatagramFailureNtf","DatagramProgressNtf","ParamChangeNtf","RefuseRsp","FailureNtf","DatagramTraceReq","RouteDiscoveryReq","RouteTraceReq","RouteDiscoveryNtf","RouteTraceNtf","FecDecodeReq","RxJanusFrameNtf","TxJanusFrameReq","BadFrameNtf","BadRangeNtf","ClearSyncReq","CollisionNtf","RxFrameNtf","RxFrameStartNtf","SyncInfoReq","SyncInfoRsp","TxFrameNtf","TxFrameReq","TxFrameStartNtf","TxRawFrameReq","AddressAllocReq","AddressAllocRsp","AddressResolutionReq","AddressResolutionRsp","RecordBasebandSignalReq","RxBasebandSignalNtf","TxBasebandSignalReq","LinkStatusNtf","RangeNtf","RangeReq","BeaconReq","RespondReq","InterrogationNtf","ReservationAcceptReq","ReservationCancelReq","ReservationReq","ReservationRsp","ReservationStatusNtf","RxAckNtf","TxAckReq","RemoteExecReq","RemoteFailureNtf","RemoteFileGetReq","RemoteFileNtf","RemoteFilePutReq","RemoteSuccessNtf","RemoteTextNtf","RemoteTextReq","AddScheduledSleepReq","GetSleepScheduleReq","RemoveScheduledSleepReq","SleepScheduleRsp","WakeFromSleepNtf","ClearStateReq","SaveStateReq","_initConv","lat","rlat","PI","yScale","cos","CachingAgentID","greedy","cache","specialParams","set","_updateCache","maxage","_isCached","_getCache","Set","r","get","_toNamed","vals","every","undefined","c","ctime","Date","now","lastIndexOf","slice","CachingGateway","warn","existing","_getGWCache","_timeout","_queueSize","pending","subscriptions","eventListeners","queue","aid","_createConnector","_addGWCache","_sendEvent","type","_onMsgRx","id","action","_deserialize","message","consumed","inResponseTo","agentIDs","answer","agentID","services","_msgTx","_msgTxRx","rq","Promise","resolve","timer","clearTimeout","conn","protocol","state","flush","_update_watch","_matchMessage","filter","prototype","hasOwnProperty","__proto__","_getMessageFromQueue","matchedMsg","g","gw","_removeGWCache","addEventListener","removeEventListener","addMessageListener","removeMessageListener","addConnListener","removeConnListener","getAgentID","agent","topic2","subscribe","unsubscribe","service","aids","relay","receive","lid","caching","agentForService","agentsForService","path","Gateway","localProtocol","remoteProtocol","provider","isClosed","unbind","isBound","connect","to","disconnect","isConnected","nodeinfo","addr","getLocalProtocol","getRemoteAddress","getRemoteProtocol","ms","getTimeout","req","getGateway","svc","nodeName","arp","address","origin","y","coords","xScale","lon","pos"],"mappings":"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"}